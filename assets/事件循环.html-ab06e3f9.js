import{_ as i,p as l,q as a,a1 as e}from"./framework-204010b2.js";const r={},t=e('<h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h2><ul><li>线程和进程是操作系统中的两个概念： <ul><li>进程（process）：计算机已经运行的程序，是操作系统管理程序的一种方式；</li><li>线程（thread）：操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中；</li></ul></li><li>听起来很抽象，这里还是给出我的解释： <ul><li>进程：我们可以认为，启动一个应用程序，就会默认启动一个进程（也可能是多个进程）；</li><li>线程：每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称之为主线程；</li><li>所以我们也可以说进程是线程的容器；</li></ul></li></ul><h2 id="浏览器中的-javascript-线程" tabindex="-1"><a class="header-anchor" href="#浏览器中的-javascript-线程" aria-hidden="true">#</a> 浏览器中的 JavaScript 线程</h2><ul><li>我们经常会说 JavaScript 是单线程（可以开启 workers）的，但是 JavaScript 的线程应该有自己的容器进程：浏览器或者 Node。</li><li>浏览器是一个进程吗，它里面只有一个线程吗？ <ul><li>目前多数的浏览器其实都是多进程的，当我们打开一个 tab 页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成 所有页面无法响应，整个浏览器需要强制退出；</li><li>每个进程中又有很多的线程，其中包括执行 JavaScript 代码的线程；</li></ul></li><li>JavaScript 的代码执行是在一个单独的线程中执行的： <ul><li>这就意味着 JavaScript 的代码，在同一个时刻只能做一件事；</li><li>如果这件事是非常耗时的，就意味着当前的线程就会被阻塞；</li></ul></li><li>所以真正耗时的操作，实际上并不是由 JavaScript 线程在执行的： <ul><li>浏览器的每个进程是多线程的，那么其他线程可以来完成这个耗时的操作；</li><li>比如网络请求、定时器，我们只需要在特性的时候执行应该有的回调即可；</li></ul></li></ul>',5),c=[t];function s(d,h){return l(),a("div",null,c)}const u=i(r,[["render",s],["__file","事件循环.html.vue"]]);export{u as default};
