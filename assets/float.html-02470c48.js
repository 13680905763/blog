import{_ as a,p as e,q as l,a1 as i}from"./framework-204010b2.js";const t="/blog/img/web/css/float/float-rule1.jpg",n="/blog/img/web/css/float/float-rule2.jpg",s="/blog/img/web/css/float/float-rule3.jpg",r="/blog/img/web/css/float/float-rule4.jpg",d="/blog/img/web/css/float/float-rule5.jpg",o={},c=i('<h1 id="float" tabindex="-1"><a class="header-anchor" href="#float" aria-hidden="true">#</a> float</h1><h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> what</h2><p>float 属性可以指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。</p><ul><li>float 属性最初只用于在一段文本内浮动图像, 实现文字环绕的效果;</li><li>但是早期的 CSS 标准中并没有提供好的左右布局方案, 因此在一段时间里面它成为网页多列布局的最常用工具;</li></ul><p>绝对定位、浮动都会让元素脱离标准流，以达到灵活布局的效果</p><p>float 的常用取值</p><ul><li>none：不浮动，默认值</li><li>left：向左浮动</li><li>right：向右浮动</li></ul><h2 id="规则一" tabindex="-1"><a class="header-anchor" href="#规则一" aria-hidden="true">#</a> 规则一</h2><p>元素一旦浮动后, 脱离标准流</p><ul><li>朝着向左或向右方向移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止</li><li>定位元素会层叠在浮动元素上面</li></ul><p><img src="'+t+'" alt="float-rule"></p><h2 id="规则二" tabindex="-1"><a class="header-anchor" href="#规则二" aria-hidden="true">#</a> 规则二</h2><p>浮动元素的左（右）边界不能超出包含块的左（右）边界</p><p><img src="'+n+'" alt="float-rule"></p><h2 id="规则三" tabindex="-1"><a class="header-anchor" href="#规则三" aria-hidden="true">#</a> 规则三</h2><p>浮动元素之间不能层叠</p><ul><li>如果一个元素浮动，另一个浮动元素已经在那个位置了，后浮动的元素将紧贴着前一个浮动元素（左浮找左浮，右浮找右浮）</li><li>如果水平方向剩余的空间不够显示浮动元素，浮动元素将向下移动，直到有充足的空间为止</li></ul><p><img src="'+s+'" alt="float-rule"></p><h2 id="规则四" tabindex="-1"><a class="header-anchor" href="#规则四" aria-hidden="true">#</a> 规则四</h2><p>浮动元素不能与行内级内容层叠，行内级内容将会被浮动元素推出</p><ul><li>比如行内级元素、inline-block 元素、块级元素的文字内容</li></ul><p><img src="'+r+'" alt="float-rule"></p><h2 id="规则五" tabindex="-1"><a class="header-anchor" href="#规则五" aria-hidden="true">#</a> 规则五</h2><p>行内级元素、inline-block 元素浮动后，其顶部将与所在行的顶部对齐</p><p><img src="'+d+`" alt="float-rule"></p><h2 id="浮动的问题-–-高度塌陷" tabindex="-1"><a class="header-anchor" href="#浮动的问题-–-高度塌陷" aria-hidden="true">#</a> 浮动的问题 – 高度塌陷</h2><ul><li>由于浮动元素脱离了标准流，变成了脱标元素，所以不再向父元素汇报高度 <ul><li>父元素计算总高度时，就不会计算浮动子元素的高度，导致了高度坍塌的问题</li></ul></li><li>解决父元素高度坍塌问题的过程，一般叫做清浮动（清理浮动、清除浮动）</li><li>清浮动的目的是 <ul><li>让父元素计算总高度的时候，把浮动子元素的高度算进去</li></ul></li></ul><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear</h2><p>clear 属性可以指定一个元素是否必须移动(清除浮动后)到在它之前的浮动元素下面;</p><p>常用取值</p><ul><li>left：要求元素的顶部低于之前生成的所有左浮动元素的底部</li><li>right：要求元素的顶部低于之前生成的所有右浮动元素的底部</li><li>both：要求元素的顶部低于之前生成的所有浮动元素的底部</li><li>none：默认值，无特殊要求</li></ul><h2 id="清除浮动的方法" tabindex="-1"><a class="header-anchor" href="#清除浮动的方法" aria-hidden="true">#</a> 清除浮动的方法</h2><h3 id="给父元素设置固定高度" tabindex="-1"><a class="header-anchor" href="#给父元素设置固定高度" aria-hidden="true">#</a> 给父元素设置固定高度</h3><ul><li>不推荐</li></ul><h3 id="在父元素最后增加一个空的块级子元素-并且让它设置-clear-both" tabindex="-1"><a class="header-anchor" href="#在父元素最后增加一个空的块级子元素-并且让它设置-clear-both" aria-hidden="true">#</a> 在父元素最后增加一个空的块级子元素，并且让它设置 clear: both</h3><ul><li>会增加很多无意义的空标签，维护麻烦</li><li>不推荐</li></ul><h3 id="给父元素添加一个伪元素" tabindex="-1"><a class="header-anchor" href="#给父元素添加一个伪元素" aria-hidden="true">#</a> 给父元素添加一个伪元素</h3><ul><li>推荐;</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clear-fix::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
  // 浏览器兼容
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮动的一些-demo" tabindex="-1"><a class="header-anchor" href="#浮动的一些-demo" aria-hidden="true">#</a> 浮动的一些 demo</h2><h2 id="布局方案总结" tabindex="-1"><a class="header-anchor" href="#布局方案总结" aria-hidden="true">#</a> 布局方案总结</h2><table><thead><tr><th>定位方案</th><th>应用场景</th></tr></thead><tbody><tr><td>normal flow（标准流）</td><td>垂直布局</td></tr><tr><td>absolute positioning（绝对定位）</td><td>层叠布局</td></tr><tr><td>float（浮动）</td><td>水平布局</td></tr></tbody></table>`,42),h=[c];function p(u,f){return e(),l("div",null,h)}const m=a(o,[["render",p],["__file","float.html.vue"]]);export{m as default};
