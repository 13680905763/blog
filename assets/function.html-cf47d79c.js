import{_ as n,p as a,q as s,a1 as t}from"./framework-204010b2.js";const e={},o=t(`<h1 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> function</h1><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> arguments</h2><p>Arguments is an array like object that corresponds to the parameters passed to the function</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// [10,20,30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Array-like means that it is not an array type, but an object type</p><ul><li><p>it has some features of arrays, such as length, which can be accessed through an index.</p></li><li><p>it does not have some methods for arrays, such as filter, map...;</p></li></ul><h3 id="arguments-to-array" tabindex="-1"><a class="header-anchor" href="#arguments-to-array" aria-hidden="true">#</a> Arguments to Array</h3><p>In development, we often need to convert arguments to Array in order to use some features of arrays</p><p>Conversion method 1:</p><ul><li>Traverse the arguments and add them to a new array；</li></ul><p>Conversion method 2:</p><ul><li>Call method for calling array slice function；</li></ul><p>Conversion method 3:Two methods in ES6</p><ul><li>Array.from</li><li>[…arguments]</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 遍历</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// slice</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>

<span class="token comment">// es6</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrow-function-is-not-bound-to-arguments" tabindex="-1"><a class="header-anchor" href="#arrow-function-is-not-bound-to-arguments" aria-hidden="true">#</a> Arrow function is not bound to arguments</h3><p>Using arguments in the arrow function will look up the upper scope</p><h2 id="rest-parameters" tabindex="-1"><a class="header-anchor" href="#rest-parameters" aria-hidden="true">#</a> Rest Parameters</h2><p>The last parameter is ... prefix, it will put the rest parameters into the parameter and serve as an array</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Difference between Rest parameters and arguments</p><ul><li>The Rest parameters contain only those arguments that do not have corresponding formal parameters, while the arguments object contains all the arguments passed to the function；</li><li>The arguments object is not a real array, while the rest parameter is a real array that can perform all operations on the array；</li><li>arguments 是早期的 ECMAScript 中为了方便去获取所有的参数提供的一个数据结构，而 rest 参数是 ES6 中提供并且希望以此来替代 arguments 的；</li></ul>`,22),p=[o];function c(r,i){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","function.html.vue"]]);export{u as default};
