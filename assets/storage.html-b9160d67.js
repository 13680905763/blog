import{_ as e,p as l,q as a,a1 as t}from"./framework-204010b2.js";const i={},o=t('<h1 id="storage" tabindex="-1"><a class="header-anchor" href="#storage" aria-hidden="true">#</a> storage</h1><p>WebStorage 主要提供了一种机制，可以让浏览器提供一种比 cookie 更直观的 key、value 存储方式：</p><ul><li>localStorage：本地存储，提供的是一种永久性的存储方法，在关闭掉网页重新打开时，存储的内容依然保留；</li><li>sessionStorage：会话存储，提供的是本次会话的存储，在关闭掉会话时，存储的内容会被清除；</li></ul><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><ol><li>关闭网页后重新打开，localStorage 会保留，而 sessionStorage 会被删除；</li><li>在页面内实现跳转，localStorage 会保留，sessionStorage 也会保留；</li><li>在页面外实现跳转（打开新的网页），localStorage 会保留，sessionStorage 不会被保留；</li></ol><h2 id="storage-常见的方法和属性" tabindex="-1"><a class="header-anchor" href="#storage-常见的方法和属性" aria-hidden="true">#</a> Storage 常见的方法和属性</h2><ul><li>属性： <ul><li>Storage.length：只读属性 <ul><li>返回一个整数，表示存储在 Storage 对象中的数据项数量；</li></ul></li></ul></li><li>方法： <ul><li>Storage.key()：该方法接受一个数值 n 作为参数，返回存储中的第 n 个 key 名称；</li><li>Storage.getItem()：该方法接受一个 key 作为参数，并且返回 key 对应的 value；</li><li>Storage.setItem()：该方法接受一个 key 和 value，并且将会把 key 和 value 添加到存储中。 <ul><li>如果 key 存储，则更新其对应的值；</li></ul></li><li>Storage.removeItem()：该方法接受一个 key 作为参数，并把该 key 从存储中删除；</li><li>Storage.clear()：该方法的作用是清空存储中的所有 key；</li></ul></li></ul>',7),r=[o];function s(n,c){return l(),a("div",null,r)}const h=e(i,[["render",s],["__file","storage.html.vue"]]);export{h as default};
