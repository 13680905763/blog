import{_ as e,M as t,p as i,q as l,R as n,t as s,N as p,a1 as o}from"./framework-204010b2.js";const c="/blog/img/web/typescript/内置类.jpg",r={},d=o(`<h1 id="知识扩展" tabindex="-1"><a class="header-anchor" href="#知识扩展" aria-hidden="true">#</a> 知识扩展</h1><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><p>TypeScript 中最主要使用的模块化方案就是 ES Module；</p><ul><li>JavaScript 规范声明任何没有 export 的 JavaScript 文件都应该被认为是一个脚本，而非一个模块。</li><li>在一个脚本文件中，变量和类型会被声明在共享的全局作用域，将多个输入文件合并成一个输出文件，或者在 HTML 使用多 个 <code>&lt;script&gt;</code> 标签加载这些文件。</li></ul><p>如果你有一个文件，现在没有任何 import 或者 export，但是你希望它被作为模块处理，添加这行代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="命名空间-了解" tabindex="-1"><a class="header-anchor" href="#命名空间-了解" aria-hidden="true">#</a> 命名空间（了解）</h2><ul><li>命名空间在 TypeScript 早期时，称之为内部模块，目的是将一个模块内部再进行作用域的划分，防止一些命名冲突的问题；</li><li>虽然命名空间没有被废弃，但是由于 ES 模块已经拥有了命名空间的大部分特性，因此更推荐使用 ES 模块，这样才能与 JavaScript 的（发展）方向保持一致。</li></ul><h2 id="类型的查找" tabindex="-1"><a class="header-anchor" href="#类型的查找" aria-hidden="true">#</a> 类型的查找</h2><p>typescript 查找类型声明</p><ul><li>内置类型声明；</li><li>外部定义类型声明；</li><li>自己定义类型声明；</li></ul><p>.d.ts 文件是用来做类型的声明(declare)，称之为类型声明（Type Declaration）或者类型定义（Type Definition）文件。</p><h3 id="内置类型声明" tabindex="-1"><a class="header-anchor" href="#内置类型声明" aria-hidden="true">#</a> 内置类型声明</h3><ul><li>内置类型声明是 typescript 自带的、帮助我们内置了 JavaScript 运行时的一些标准化 API 的声明文件； <ul><li>包括比如 Function、String、Math、Date 等内置类型；</li><li>也包括运行环境中的 DOM API，比如 Window、Document 等；</li></ul></li><li>TypeScript 使用模式命名这些声明文件 lib.[something].d.ts。</li><li>内置类型声明通常在我们安装 typescript 的环境中会带有的</li></ul><p><img src="`+c+`" alt="内置类"></p><h3 id="外部定义类型声明-第三方库" tabindex="-1"><a class="header-anchor" href="#外部定义类型声明-第三方库" aria-hidden="true">#</a> 外部定义类型声明（第三方库）</h3><p>外部类型声明通常是我们使用一些库（比如第三方库）时，需要的一些类型声明。</p><ol><li>在自己库中进行类型声明（编写.d.ts 文件），比如 axios</li><li>通过社区的一个公有库 DefinitelyTyped 存放类型声明文件</li></ol><div class="language-node line-numbers-mode" data-ext="node"><pre class="language-node"><code>// 比如安装react类型声明
npm i @types/react --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义声明" tabindex="-1"><a class="header-anchor" href="#自定义声明" aria-hidden="true">#</a> 自定义声明</h3><ol><li>我们使用的第三方库是一个纯的 JavaScript 库，没有对应的声明文件；比如 lodash</li><li>我们给自己的代码中声明一些类型，方便在其他地方直接进行使用；</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 比如lodash模块默认不能使用的情况，可以自己来声明这个模块</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;lodash&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明模块的语法: <code>declare module &#39;模块名&#39; {}</code>。</p><ul><li>在声明模块的内部，我们可以通过 export 导出对应库的类、函数等；</li></ul><h2 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h2><h3 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件" aria-hidden="true">#</a> 声明文件</h3><ul><li>比如在开发 vue 的过程中，默认是不识别我们的.vue 文件的，那么我们就需要对其进行文件的声明；</li><li>比如在开发中我们使用了 jpg 这类图片文件，默认 typescript 也是不支持的，也需要对其进行声明；</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.vue*&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> DefineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">const</span> component<span class="token operator">:</span> DefineComponent
  <span class="token keyword">export</span> <span class="token keyword">default</span> component
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.jpg&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><p>比如我们在 index.html 中直接引入了 jQuery：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 可以进行命名空间的声明：</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> $ <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>settings<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在main.ts中就可以使用了</span>
$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token string">&#39;123.com&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tsconfig-json" tabindex="-1"><a class="header-anchor" href="#tsconfig-json" aria-hidden="true">#</a> tsconfig.json</h2>`,32),u={href:"https://www.typescriptlang.org/tsconfig",target:"_blank",rel:"noopener noreferrer"},k=n("ol",null,[n("li",null,[s("（主要的作用）：让 TypeScript Compiler 在编译的时候，知道如何去编译 TypeScript 代码和进行类型检测； "),n("ul",null,[n("li",null,"比如是否允许不明确的 this 选项，是否允许隐式的 any 类型；"),n("li",null,"将 TypeScript 代码编译成什么版本的 JavaScript 代码；")])]),n("li",null,[s("让编辑器（比如 VSCode）可以按照正确的方式识别 TypeScript 代码； "),n("ul",null,[n("li",null,"对于哪些语法进行提示、类型错误检测等等；")])])],-1),v=n("li",null,"JavaScript 项目可以使用 jsconfig.json 文件，它的作用与 tsconfig.json 基本相同，只是默认启用了一些 JavaScript 相关的编译选项。",-1),h=n("p",null,"tsconfig.json 使用",-1),m=n("ul",null,[n("li",null,"在调用 tsc 命令并且没有其它输入文件参数时，编译器将由当前目录开始向父级目录寻找包含 tsconfig 文件的目录。"),n("li",null,"调用 tsc 命令并且没有其他输入文件参数，可以使用 --project （或者只是 -p）的命令行选项来指定包含了 tsconfig.json 的目录；"),n("li",null,"当命令行中指定了输入文件参数， tsconfig.json 文件会被忽略；"),n("li",null,"webpack 中使用 ts-loader 进行打包时，也会自动读取 tsconfig 文件，根据配置编译 TypeScript 代码。")],-1);function b(g,y){const a=t("ExternalLinkIcon");return i(),l("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[s("tsconfig.json"),p(a)]),s(" 文件有两个作用： "),k]),v]),h,m])}const x=e(r,[["render",b],["__file","知识扩展.html.vue"]]);export{x as default};
