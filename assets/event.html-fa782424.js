import{_ as s,M as t,p as e,q as l,R as n,t as p,N as i,a1 as o}from"./framework-204010b2.js";const c="/blog/img/web/javascript/js-base/event/event.jpg",u="/blog/img/web/javascript/js-base/event/执行过程.jpg",r="/blog/img/web/javascript/js-base/event/鼠标事件.jpg",d="/blog/img/web/javascript/js-base/event/键盘事件.jpg",k="/blog/img/web/javascript/js-base/event/表单事件.jpg",v={},g=o(`<h1 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h1><ul><li><p>Web 页面需要经常和用户之间进行交互，而交互的过程中我们可能想要捕捉这个交互的过程：</p><ul><li>比如用户点击了某个按钮、用户在输入框里面输入了某个文本、用户鼠标经过了某个位置；</li><li>浏览器需要搭建一条 JavaScript 代码和事件之间的桥梁；</li><li>当某个事件发生时，让 JavaScript 可以相应（执行某个函数），所以我们需要针对事件编写处理程序（handler）；</li></ul></li><li><p>如何进行事件监听呢？</p><ol><li><p>在 script 中直接监听（很少使用）；</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span><span class="token value javascript language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;点击了box&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">&#39;</span></span></span><span class="token punctuation">&gt;</span></span>box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>事件监听方式二：DOM 属性，通过元素的 on 来监听事件；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> boxEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span>
boxEl<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了box&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>事件监听方式三：通过 EventTarget 中的 addEventListener 来监听；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boxEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了box&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h2 id="常见的事件列表" tabindex="-1"><a class="header-anchor" href="#常见的事件列表" aria-hidden="true">#</a> 常见的事件列表</h2><ul><li>鼠标事件： <ul><li>click —— 当鼠标点击一个元素时（触摸屏设备会在点击时生成）。</li><li>mouseover / mouseout —— 当鼠标指针移入/离开一个元素时。</li><li>mousedown / mouseup —— 当在元素上按下/释放鼠标按钮时。</li><li>mousemove —— 当鼠标移动时。</li></ul></li><li>键盘事件： <ul><li>keydown 和 keyup —— 当按下和松开一个按键时。</li></ul></li><li>表单（form）元素事件： <ul><li>submit —— 当访问者提交了一个 &lt;form&gt; 时。</li><li>focus —— 当访问者聚焦于一个元素时，例如聚焦于一个 &lt;input&gt;。</li></ul></li><li>Document 事件： <ul><li>DOMContentLoaded —— 当 HTML 的加载和处理均完成，DOM 被完全构建完成时。</li></ul></li><li>CSS 事件： <ul><li>transitionend —— 当一个 CSS 动画完成时。</li></ul></li></ul><h2 id="事件流" tabindex="-1"><a class="header-anchor" href="#事件流" aria-hidden="true">#</a> 事件流</h2><p>事件有一个概念叫做事件流</p><ul><li>当我们在浏览器上对着一个元素点击时，你点击的不仅仅是这个元素本身；</li><li>这是因为我们的 HTML 元素是存在父子元素叠加层级的；</li><li>比如一个 span 元素是放在 div 元素上的，div 元素是放在 body 元素上的，body 元素是放在 html 元素上的；</li></ul><h3 id="事件冒泡和事件捕获" tabindex="-1"><a class="header-anchor" href="#事件冒泡和事件捕获" aria-hidden="true">#</a> 事件冒泡和事件捕获</h3><ul><li>我们会发现默认情况下事件是从最内层的 span 向外依次传递的顺序，这个顺序我们称之为事件冒泡（Event Bubble）;</li><li>事实上，还有另外一种监听事件流的方式就是从外层到内层（body -&gt; span），这种称之为事件捕获（Event Capture）；</li><li>为什么会产生两种不同的处理流呢？ <ul><li>这是因为早期浏览器开发时，不管是 IE 还是 Netscape 公司都发现了这个问题;</li><li>但是他们采用了完全相反的事件流来对事件进行了传递；</li><li>IE 采用了事件冒泡的方式，Netscape 采用了事件捕获的方式；</li></ul></li></ul><p><img src="`+c+'" alt="event"></p><h4 id="事件捕获和冒泡的过程" tabindex="-1"><a class="header-anchor" href="#事件捕获和冒泡的过程" aria-hidden="true">#</a> 事件捕获和冒泡的过程</h4><p>如果我们都监听，那么会按照如下顺序来执行：</p><ul><li>捕获阶段（Capturing phase）：事件（从 Window）向下走近元素。</li><li>目标阶段（Target phase）：事件到达目标元素。</li><li>冒泡阶段（Bubbling phase）：事件从元素上开始冒泡。</li></ul><p>事实上，我们可以通过 event 对象来获取当前的阶段：</p><ul><li>eventPhase</li></ul><p>开发中通常会使用事件冒泡，所以事件捕获了解即可。 <img src="'+u+`" alt="执行过程"></p><h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h2><ul><li>当一个事件发生时，就会有和这个事件相关的很多信息： <ul><li>比如事件的类型是什么，你点击的是哪一个元素，点击的位置是哪里等等相关的信息；</li><li>那么这些信息会被封装到一个 Event 对象中，这个对象由浏览器创建，称之为 event 对象；</li><li>该对象给我们提供了想要的一些属性，以及可以通过该对象进行某些操作；</li></ul></li><li>如何获取这个 event 对象呢？ <ul><li>event 对象会在传入的事件处理（event handler）函数回调时，被系统传入；</li><li>我们可以在回调函数中拿到这个 event 对象；</li></ul></li></ul><p>这个对象中都有哪些常见的属性和操作呢？</p><ul><li>常见的属性： <ul><li>type：事件的类型；</li><li>target：当前事件发生的元素；</li><li>currentTarget：当前处理事件的元素；</li><li>eventPhase：事件所处的阶段；</li><li>offsetX、offsetY：事件发生在元素内的位置；</li><li>clientX、clientY：事件发生在客户端内的位置；</li><li>pageX、pageY：事件发生在客户端相对于 document 的位置；</li><li>screenX、screenY：事件发生相对于屏幕的位置；</li></ul></li><li>常见的方法： <ul><li>preventDefault：取消事件的默认行为；</li><li>stopPropagation：阻止事件的进一步传递（冒泡或者捕获都可以阻止）；</li></ul></li></ul><h2 id="事件处理中的-this" tabindex="-1"><a class="header-anchor" href="#事件处理中的-this" aria-hidden="true">#</a> 事件处理中的 this</h2><ul><li><p>在函数中，我们也可以通过 this 来获取当前的发生元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boxEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这是因为在浏览器内部，调用 event handler 是绑定到当前的 target 上的</p></li></ul><h2 id="eventtarget-类" tabindex="-1"><a class="header-anchor" href="#eventtarget-类" aria-hidden="true">#</a> EventTarget 类</h2><ul><li>我们会发现，所有的节点、元素都继承自 EventTarget <ul><li>事实上 Window 也继承自 EventTarget；</li></ul></li><li>那么这个 EventTarget 是什么呢？ <ul><li>EventTarget 是一个 DOM 接口，主要用于添加、删除、派发 Event 事件；</li></ul></li><li>EventTarget 常见的方法： <ul><li>addEventListener：注册某个事件类型以及事件处理函数；</li><li>removeEventListener：移除某个事件类型以及事件处理函数；</li><li>dispatchEvent：派发某个事件类型到 EventTarget 上；</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boxEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;自定义事件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
boxEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;自定义事件&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监听到自定义事件&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件委托-event-delegation" tabindex="-1"><a class="header-anchor" href="#事件委托-event-delegation" aria-hidden="true">#</a> 事件委托（event delegation）</h2><ul><li><p>事件冒泡在某种情况下可以帮助我们实现强大的事件处理模式 – 事件委托模式（也是一种设计模式）</p></li><li><p>那么这个模式是怎么样的呢？</p><ul><li>因为当子元素被点击时，父元素可以通过冒泡可以监听到子元素的点击；</li><li>并且可以通过 event.target 获取到当前监听的元素；</li></ul></li><li><p>案例：一个 ul 中存放多个 li，点击某一个 li 会变成红色</p><ol><li>监听每一个 li 的点击，并且做出相应；</li><li>在 ul 中监听点击，并且通过 event.target 拿到对应的 li 进行处理； <ul><li>因为这种方案并不需要遍历后给每一个 li 上添加事件监听，所以它更加高效；</li></ul></li></ol></li><li><p>某些事件委托可能需要对具体的子组件进行区分，这个时候我们可以使用 data-*对其进行标记：</p></li><li><p>比如多个按钮的点击，区分点击了哪一个按钮：</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">data-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btnListEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn-list&#39;</span><span class="token punctuation">)</span>
btnListEl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>action
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">&#39;search&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了搜索&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;点击了删除&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见的鼠标事件" tabindex="-1"><a class="header-anchor" href="#常见的鼠标事件" aria-hidden="true">#</a> 常见的鼠标事件</h2><ul><li>常见的鼠标事件（不仅仅是鼠标设备，也包括模拟鼠标的设备，比如手机、平板电脑）</li></ul><p><img src="`+r+'" alt="鼠标事件"></p><h3 id="mouseover-和-mouseenter-的区别" tabindex="-1"><a class="header-anchor" href="#mouseover-和-mouseenter-的区别" aria-hidden="true">#</a> mouseover 和 mouseenter 的区别</h3><ul><li>mouseenter 和 mouseleave <ul><li>不支持冒泡</li><li>进入子元素依然属于在该元素内，没有任何反应</li></ul></li><li>mouseover 和 mouseout <ul><li>支持冒泡</li><li>进入元素的子元素时 <ul><li>先调用父元素的 mouseout</li><li>再调用子元素的 mouseover</li><li>因为支持冒泡，所以会将 mouseover 传递到父元素中；</li></ul></li></ul></li></ul><h2 id="常见的键盘事件" tabindex="-1"><a class="header-anchor" href="#常见的键盘事件" aria-hidden="true">#</a> 常见的键盘事件</h2><p><img src="'+d+'" alt="键盘事件"></p><ul><li>事件的执行顺序是 onkeydown、onkeypress、onkeyup <ul><li>down 事件先发生；</li><li>press 发生在文本被输入；</li><li>up 发生在文本输入完成；</li></ul></li><li>我们可以通过 key 和 code 来区分按下的键： <ul><li>code：“按键代码”（&quot;KeyA&quot;，&quot;ArrowLeft&quot; 等），特定于键盘上按键的物理位置。</li><li>key：字符（&quot;A&quot;，&quot;a&quot; 等），对于非字符（non-character）的按键，通常具有与 code 相同的值。）</li></ul></li></ul><h2 id="常见的表单事件" tabindex="-1"><a class="header-anchor" href="#常见的表单事件" aria-hidden="true">#</a> 常见的表单事件</h2><p><img src="'+k+'" alt="表单事件"></p><h2 id="文档加载事件" tabindex="-1"><a class="header-anchor" href="#文档加载事件" aria-hidden="true">#</a> 文档加载事件</h2><ul><li>DOMContentLoaded：浏览器已完全加载 HTML，并构建了 DOM 树，但像 &lt;img&gt; 和样式表之类的外部资源可能尚未加载完成。</li><li>load：浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等</li></ul>',41),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/Events",target:"_blank",rel:"noopener noreferrer"};function m(b,f){const a=t("ExternalLinkIcon");return e(),l("div",null,[g,n("p",null,[n("a",h,[p("更多事件..."),i(a)])])])}const E=s(v,[["render",m],["__file","event.html.vue"]]);export{E as default};
