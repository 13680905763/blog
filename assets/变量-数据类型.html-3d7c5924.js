import{_ as s,M as i,p as t,q as r,R as a,t as l,N as o,a1 as e}from"./framework-204010b2.js";const u="/blog/img/web/javascript/js-base/variables-dataTypes/var-use1.jpg",p="/blog/img/web/javascript/js-base/variables-dataTypes/var-use2.jpg",d="/blog/img/web/javascript/js-base/variables-dataTypes/var-use3.jpg",c="/blog/img/web/javascript/js-base/variables-dataTypes/转义字符.jpg",h="/blog/img/web/javascript/js-base/variables-dataTypes/number-rule.jpg",v={},b=e('<h1 id="变量-数据类型" tabindex="-1"><a class="header-anchor" href="#变量-数据类型" aria-hidden="true">#</a> 变量-数据类型</h1><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h2 id="变量命名规范" tabindex="-1"><a class="header-anchor" href="#变量命名规范" aria-hidden="true">#</a> 变量命名规范</h2>',3),m=a("li",null,"第一个字符必须是一个字母、下划线（ _ ）或一个美元符号（ $ ）",-1),g=a("li",null,"其他字符可以是字母、下划线、美元符号或数字",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/lexical_grammar",target:"_blank",rel:"noopener noreferrer"},f=a("li",null,"变量严格区分大小写",-1),_=e(`<h3 id="变量的使用注意" tabindex="-1"><a class="header-anchor" href="#变量的使用注意" aria-hidden="true">#</a> 变量的使用注意</h3><ol><li><p>变量未声明（declaration）就直接使用，那么会报错；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt="var-use1"></p></li><li><p>变量有声明，但是没有赋值，那么默认值是 undefined</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> message
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="var-use2"></p></li><li><p>没有使用 var 声明变量也可以，但是不推荐（事实上会被添加到 window 对象上）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>A_message <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="var-use3"></p></li></ol><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>JavaScript 中的值都具有特定的类型。</p><ul><li>例如，字符串或数字。</li><li>我们可以将值赋值给一个变量，那么这个变量就具备了特定的类型；</li><li>一个变量可以在前一刻是个字符串，下一刻就存储一个数字；</li><li>允许这种操作的编程语言，例如 JavaScript，被称为“动态类型”（dynamically typed）的编程语言；</li></ul><p>在 JavaScript 中有 8 种基本的数据类型（7 种原始类型和 1 种复杂类型）</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Object</li><li>BigInt（后续了解）</li><li>Symbol（后续了解）</li></ul><h3 id="typeof-操作符" tabindex="-1"><a class="header-anchor" href="#typeof-操作符" aria-hidden="true">#</a> typeof 操作符</h3><ul><li>因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。 <ul><li>typeof 操作符就是为此而生的。</li></ul></li><li>对一个值使用 typeof 操作符会返回下列字符串之一: <ul><li>&quot;undefined&quot;表示值未定义;</li><li>&quot;boolean&quot;表示值为布尔值;</li><li>&quot;string&quot;表示值为字符串;</li><li>&quot;number&quot;表示值为数值;</li><li>&quot;object&quot;表示值为对象(而不是函数)或 null;</li><li>&quot;function&quot;表示值为函数;</li><li>“symbol”表示值为符号；</li></ul></li><li>typeof()的用法： <ul><li>你可能还会遇到另一种语法：typeof(x)，它与 typeof x 相同；</li><li>typeof 是一个操作符，并非是一个函数，()只是将后续的内容当做一个整体而已；</li></ul></li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><ul><li>number 类型代表整数和浮点数。</li><li>数字 number 可以有很多操作，比如，乘法 *、除法 /、加法 +、减法 - 等等。</li><li>除了常规的数字，还包括所谓的“特殊数值（“special numeric values”）”也属于 Number 类型（了解） <ul><li>Infinity：代表数学概念中的 无穷大 ∞，也可以表示-Infinity； 比如 1/0 得到的就是无穷大；</li><li>NaN：NaN 代表一个计算错误，它是一个错误的操作所得到的结果； 比如 字符串和一个数字相乘；</li></ul></li></ul><p>数字类型也有其他的进制表示方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">111</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">0x111</span> <span class="token comment">// 16进制</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">0o111</span> <span class="token comment">// 8进制</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token number">0b111</span> <span class="token comment">// 2进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字表示的范围：</p><ul><li>最小正数值：Number.MIN_VALUE，这个值为： 5e-324，小于这个的数字会被转化为 0</li><li>最大正数值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li></ul><p>isNaN 用于判断是否不是一个数字。不是数字返回 true，是数字返回 false。</p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h4><p>有特殊功能的字符可以通过转义字符的形式放入字符串中 <img src="`+c+`" alt="转义字符"></p><h4 id="属性和方法" tabindex="-1"><a class="header-anchor" href="#属性和方法" aria-hidden="true">#</a> 属性和方法</h4><ul><li><p>字符串拼接，通过+运算符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token keyword">var</span> newStr <span class="token operator">=</span> str1 <span class="token operator">+</span> str2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取字符串长度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>Boolean 类型仅包含两个值：true 和 false</p><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p>Undefined 类型只有一个值，就是特殊值 undefined。</p><ul><li>如果我们声明一个变量，但是没有对其进行初始化时，它默认就是 undefined；</li><li>注意事项： <ul><li>最好在变量定义的时候进行初始化，而不只是声明一个变量；</li><li>不要显示的将一个变量赋值为 undefined <ul><li>如果变量刚开始什么都没有，我们可以初始化为 0、空字符串、null 等值；</li></ul></li></ul></li></ul><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><ul><li>Object 类型是一个特殊的类型，我们通常把它称为引用类型或者复杂类型； <ul><li>其他的数据类型我们通常称之为 “原始类型”，因为它们的值质保函一个单独的内容（字符串、数字或者其他）；</li><li>Object 往往可以表示一组数据，是其他数据的一个集合；</li><li>在 JavaScript 中我们可以使用 花括号{} 的方式来表示一个对象；</li></ul></li></ul><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><ul><li>Null 类型同样只有一个值，即特殊值 null。 <ul><li>null 类型通常用来表示一个对象为空，所以通常我们在给一个对象进行初始化时，会赋值为 null；</li></ul></li><li>null 和 undefined 的关系： <ul><li>undefined 通常只有在一个变量声明但是未初始化时，它的默认值是 undefined 才会用到；</li><li>并且我们不推荐直接给一个变量赋值为 undefined，所以很少主动来使用；</li><li>null 值非常常用，当一个变量准备保存一个对象，但是这个对象不确定时，我们可以先赋值为 null；</li></ul></li></ul><h3 id="数据类型总结" tabindex="-1"><a class="header-anchor" href="#数据类型总结" aria-hidden="true">#</a> 数据类型总结</h3><p>JavaScript 中有八种基本的数据类型（前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型，也称为引用类 型）。</p><ul><li>number 用于任何类型的数字：整数或浮点数。</li><li>string 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li>boolean 用于 true 和 false。</li><li>undefined 用于未定义的值 —— 只有一个 undefined 值的独立类型。</li><li>object 用于更复杂的数据结构。</li><li>null 用于未知的值 —— 只有一个 null 值的独立类型。</li></ul><h3 id="数据类型的转换" tabindex="-1"><a class="header-anchor" href="#数据类型的转换" aria-hidden="true">#</a> 数据类型的转换</h3><ul><li>在开发中，我们可能会在不同的数据类型之间进行某些操作 <ul><li>比如把一个 String 类型的数字和另外一个 Number 类型的数字进行运算；</li><li>比如把一个 String 类型的文本和另外一个 Number 类型的数字进行相加；</li><li>比如把一个 String 类型或者 Number 类型的内容，当做一个 Boolean 类型来进行判断；</li><li>等等</li></ul></li><li>也就是在开发中，我们会经常需要对数据类型进行转换： <ul><li>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型，这是一种隐式转换；</li><li>我们也可以，通过显示的方式来对数据类型进行转换；</li></ul></li></ul><p>接下来我们来看一下数据类型之间的转换：</p><ol><li>字符串 String 的转换 其他类型经常需要转换成字符串类型，比如和字符串拼接在一起或者使用字符串中的方法。 <ul><li>隐式转换 <ul><li>一个字符串和另一个字符串进行+操作； ✓ 如果+运算符左右两边有一个是字符串，那么另一边会自动转换成字符串类型进行拼接；</li><li>某些函数的执行也会自动将参数转为字符串类型； ✓ 比如 console.log 函数；</li></ul></li><li>显式转换 <ul><li>调用 String()函数；</li><li>调用 toString()方法；</li></ul></li></ul></li><li>数字类型 Number 的转换 <ul><li>隐式转换 <ul><li>在算数运算中，通常会将其他类型转换成数字类型来进行运算； <ul><li>比如 &quot;6&quot; / &quot;2&quot;；</li><li>但是如果是+运算，并且其中一边有字符串，那么还是按照字符串来连接的；</li></ul></li></ul></li><li>显式转换 <ul><li>我们也可以使用 Number()函数来进行显式的转换；</li></ul></li><li>其他类型转换数字的规则 <img src="`+h+'" alt="number-rule"> -</li></ul></li><li>布尔类型 Boolean 的转换 <ul><li>它发生在逻辑运算中，但是也可以通过调用 Boolean(value) 显式地进行转换。</li><li>转换规则如下： <ul><li>直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。</li><li>其他值变成 true。</li></ul></li><li>注意：包含 0 的字符串 &quot;0&quot; 是 true <ul><li>一些编程语言（比如 PHP）视 &quot;0&quot; 为 false。但在 JavaScript 中，非空的字符串总是 true。</li></ul></li></ul></li></ol>',39);function j(x,y){const n=i("ExternalLinkIcon");return t(),r("div",null,[b,a("ol",null,[m,g,a("li",null,[l("不能使用"),a("a",k,[l("关键字和保留字"),o(n)]),l("命名：")]),f]),_])}const w=s(v,[["render",j],["__file","变量-数据类型.html.vue"]]);export{w as default};
