import{_ as n,M as o,p as t,q as s,R as e,t as r,N as l,a1 as a}from"./framework-204010b2.js";const h="/blog/img/computer/encounter/soft.jpg",u="/blog/img/computer/encounter/url1.jpg",c="/blog/img/computer/encounter/url2.jpg",d="/blog/img/computer/encounter/url3.jpg",p="/blog/img/computer/encounter/uri.jpg",_="/blog/img/computer/encounter/字符编码.jpg",f={},g=e("h1",{id:"encounter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#encounter","aria-hidden":"true"},"#"),r(" Encounter")],-1),m=e("h2",{id:"software",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#software","aria-hidden":"true"},"#"),r(" Software")],-1),B={href:"https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},R=e("strong",null,"计算机指令",-1),b=e("li",null,[r("软件开发是什么呢?就是告诉"),e("strong",null,"计算机一系列的指令"),r("，这些指令也称之为"),e("strong",null,"程序")],-1),E=a('<h2 id="软件与应用程序" tabindex="-1"><a class="header-anchor" href="#软件与应用程序" aria-hidden="true">#</a> 软件与应用程序</h2><ul><li>应用程序、算法、编程语言、操作系统 都是软件</li></ul><p><em>引用一副图</em> .</p><p><img src="'+h+'" alt="区别"></p><h2 id="url-与-uri" tabindex="-1"><a class="header-anchor" href="#url-与-uri" aria-hidden="true">#</a> URL 与 URI</h2><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h3><p>统一资源定位符（Uniform Resource Locator）通俗的说就是一个资源在 Web 上的地址。</p><ul><li>理论上说，每个有效的 URL 都指向一个唯一的资源；</li><li>这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等</li></ul><p><img src="'+u+'" alt="URL1"></p><p>URL 的格式</p><p><strong>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段 ID]</strong></p><p><img src="'+c+'" alt="URL2"><img src="'+d+'" alt="URL3"></p><h3 id="url-、uri-、urn" tabindex="-1"><a class="header-anchor" href="#url-、uri-、urn" aria-hidden="true">#</a> URL 、URI 、URN</h3><p>url,urn 都是 uri <img src="'+p+'" alt="URI"></p>',14),A={href:"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},U=e("strong",null,"标志符",-1),x={href:"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},k=e("strong",null,"定位符",-1),L={href:"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%90%8D%E7%A7%B0",target:"_blank",rel:"noopener noreferrer"},w=e("strong",null,"名称",-1),G=a('<p>uri 是一个比较抽象的概念，而 url 和 urn 可以理解成继承至 uri，是 uri 的具体表现，uri 用于标识一个资源，这种标识允许我们对资源通过特定的协议进行交互操作，像我们可以通过定位的方式使用 url 获取一个资源，也可以用过名称的方式 urn 获取一个资源。</p><p>但是 url 的缺点是当我们资源的位置发生了变化，url 的地址也要随之改变，而 urn 的目的是好比通过一个标识名标识一个资源后，无论该资源的位置发生多少变化，我们都能通过标识名精准访问到该资源，但由于技术等原理，该方法并未实现。统一资源名仍然有因特网工程工作组（IETF）的成员在继续开发。</p><p><strong>locators are also identifiers, so every URL is also a URI, but there are URIs which are not URLs</strong>.</p><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h2><p>计算机是干什么的?</p><ul><li>计算机一开始发明出来时是用来解决数字计算问题的，后来人们发现，计算机还可以做更多的事，例如文本处理。</li><li>但计算机其实挺笨的，它只认识 010110111000…这样由 0 和 1 两个数字组成的二进制数字；</li><li>这是因为计算机的底层硬件实现就是用电路的开和闭两种状态来表示 0 和 1 两个数字的。</li><li>因此，计算机只可以直接存储和处理二进制数字。</li></ul><p>为了在计算机上也能表示、存储和处理像文字、符号等等之类的字符，就必须将这些字符转换成二进制数字。</p><ul><li>当然，肯定不是我们想怎么转换就怎么转换，否则就会造成同一段二进制数字在不同计算机上显示出来的字符不一样的情况，因此必须得定一个统一的、标准的转换规则 <img src="'+_+'" alt="字符编码"></li></ul>',8),I={href:"https://www.jianshu.com/p/899e749be47c",target:"_blank",rel:"noopener noreferrer"},N=a('<h2 id="进制" tabindex="-1"><a class="header-anchor" href="#进制" aria-hidden="true">#</a> 进制</h2><p>概念：进位制是一种记数方式，亦称进位计数法或位值计数法。当数字达到某个值时，进一位(比如从 1 位变成 2 位)。</p><ul><li>二进制：当数字到 1 的时候，用一位已经表示不了了，那么就进一位。</li><li>八进制：当数字到 7 的时候，用一位已经表示不了了，那么就进一位。</li><li>十进制：当数字到 9 的时候，用一位已经表示不了了，那么就进一位。</li><li>十六进制：等等，用一位如何表示十六个数字呢？a(10)、b(11)、c(12) 、 d(13) 、 e(14) 、 f(15)</li></ul><h3 id="人类的十进制" tabindex="-1"><a class="header-anchor" href="#人类的十进制" aria-hidden="true">#</a> 人类的十进制</h3><p>从发明数字的开始，人类就使用十进制，原因可能是人类正好十根手指。</p><p>但是计算机就认为二进制、八进制、十六进制更符合自己的思维</p><h3 id="如何表示其他进制" tabindex="-1"><a class="header-anchor" href="#如何表示其他进制" aria-hidden="true">#</a> 如何表示其他进制</h3><ul><li>二进制（0b 开头, binary）：其中的数字由 0、1 组成，可以回顾之前学习过的机器语言。</li><li>八进制（0o 开头, Octonary）：其中的数字由 0~7 组成。</li><li>十六进制（0x 开头, hexadecimal）：其中的数字由 0~9 和字母 a-f 组成（大小写都可以）</li></ul><h3 id="十进制-二进制" tabindex="-1"><a class="header-anchor" href="#十进制-二进制" aria-hidden="true">#</a> 十进制|二进制</h3><ul><li>虽然计算机更喜欢二进制, 但是编程中我们还是以十进制为主.</li><li>因为高级编程语言的目的就是更加接近自然语言, 让我们人类更容易理解</li></ul><p>十进制转其他，整除取余</p><h2 id="颜色" tabindex="-1"><a class="header-anchor" href="#颜色" aria-hidden="true">#</a> 颜色</h2><p>在 css 中颜色有以下几种表示方法</p>',13),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value#%E9%A2%9C%E8%89%B2%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"},C=a("<li>RGB 颜色可以通过以#为前缀的十六进制字符和函数（rgb()、rgba()）标记表示 <ol><li>十六进制符号：#RRGGBB[AA] <ul><li>R（红）、G（绿）、B （蓝）和 A （alpha）是十六进制字符（0–9、A–F）；A 是可选的 比如，#ff0000 等价于#ff0000ff</li></ul></li><li>十六进制符号：#RGB[A] <ul><li>三位数符号（#RGB）是六位数形式（#RRGGBB）的减缩版 比如，#f09 和#ff0099 表示同一颜色</li><li>四位数符号（#RGBA）是八位数形式（#RRGGBBAA）的减缩版 比如，#0f38 和#00ff3388 表示相同颜色</li></ul></li><li>函数符： rgb[a](R, G, B[, A]) <ul><li>R（红）、G（绿）、B （蓝）可以是数字，或者百分比，255 相当于 100%</li><li>A（alpha）可以是 0 到 1 之间的数字，或者百分比，数字 1 相当于 100%（完全不透明）</li></ul></li></ol></li>",1);function F(v,z){const i=o("ExternalLinkIcon");return t(),s("div",null,[g,m,e("ul",null,[e("li",null,[e("a",B,[r("专业的软件定义"),l(i)]),r("：一系列按照特定顺序组织的"),R]),b]),E,e("ul",null,[e("li",null,[e("a",A,[r("URI"),l(i)]),r(" = Uniform Resource Identifier 统一资源"),U,r("，用于标识 Web 技术使用的逻辑或物理资源。；")]),e("li",null,[e("a",x,[r("URL"),l(i)]),r(" = Uniform Resource Locator 统一资源"),k,r("，俗称网络地址，相当于网络中的门牌号；")]),e("li",null,[e("a",L,[r("URN"),l(i)]),r(" = Uniform Resource Name 统一资源"),w,r("，是带有名字的因特网资源；")])]),G,e("p",null,[e("a",I,[r("了解更多"),l(i)])]),N,e("ul",null,[e("li",null,[e("a",j,[r("颜色关键字"),l(i)])]),C])])}const S=n(f,[["render",F],["__file","index.html.vue"]]);export{S as default};
