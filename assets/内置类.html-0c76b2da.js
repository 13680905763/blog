import{_ as p,M as i,p as l,q as c,R as n,t as a,N as t,a1 as s}from"./framework-204010b2.js";const o="/blog/img/web/javascript/js-base/内置类/获取子字符串.jpg",u="/blog/img/web/javascript/js-base/内置类/时区对比图.jpg",r={},d=s(`<h1 id="常见内置类" tabindex="-1"><a class="header-anchor" href="#常见内置类" aria-hidden="true">#</a> 常见内置类</h1><h2 id="原始类型的包装类" tabindex="-1"><a class="header-anchor" href="#原始类型的包装类" aria-hidden="true">#</a> 原始类型的包装类</h2><ul><li>原始类型是简单的值，默认并不能调用属性和方法；</li><li>JavaScript 为了可以使其可以获取属性和调用方法，对其封装了对应的包装类型 <ul><li>常见的包装类型有：String、Number、Boolean、Symbol、BigInt 类型</li></ul></li></ul><h3 id="包装类型的使用过程" tabindex="-1"><a class="header-anchor" href="#包装类型的使用过程" aria-hidden="true">#</a> 包装类型的使用过程</h3><ul><li>默认情况，当我们调用一个原始类型的属性或者方法时，会进行如下操作： <ol><li>根据原始值，创建一个原始类型对应的包装类型对象；</li><li>调用对应的属性或者方法，返回一个新的值；</li><li>创建的包装类对象被销毁；</li><li>通常 JavaScript 引擎会进行很多的优化，它可以跳过创建包装类的过程在内部直接完成属性的获取或者方法的调用。</li></ol></li><li>我们也可以自己来创建一个包装类的对象： <ul><li>name1 是字面量（literal）的创建方式，name2 是 new 创建对象的方式；</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name1 <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span>
<span class="token keyword">const</span> name2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name1<span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name1<span class="token punctuation">)</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1 <span class="token operator">===</span> name2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意事项：null、undefined 没有任何的方法，也没有对应的“对象包装类”；</li></ul><h3 id="number-类" tabindex="-1"><a class="header-anchor" href="#number-类" aria-hidden="true">#</a> Number 类</h3><p>数字包装类型 Number</p>`,9),k=s("<li>Number 属性补充： <ul><li>Number.MAX_SAFE_INTEGER：JavaScript 中最大的安全整数 (2^53 - 1)；</li><li>Number.MIN_SAFE_INTEGER：JavaScript 中最小的安全整数 -(2^53 - 1)</li></ul></li><li>Number 实例方法补充： <ol><li>toString(base)，将数字转成字符串，并且按照 base 进制进行转化 <ul><li>base 的范围可以从 2 到 36，默认情况下是 10；</li><li>注意：如果是直接对一个数字操作，需要使用..运算符；</li></ul></li><li>toFixed(digits)，格式化一个数字，保留 digits 位的小数； <ul><li>digits 的范围是 0 到 20（包含）之间；</li></ul></li></ol></li><li>Number 类方法补充： <ol><li>Number.parseInt(string[, radix])，将字符串解析成整数，也有对应的全局方法 parseInt；</li><li>Number. parseFloat(string)，将字符串解析成浮点数，也有对应的全局方法 parseFloat；</li></ol></li>",3),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"math-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#math-对象","aria-hidden":"true"},"#"),a(" Math 对象")],-1),h=s("<li>在除了 Number 类可以对数字进行处理之外，JavaScript 还提供了一个 Math 对象。 <ul><li>Math 是一个内置对象（不是一个构造函数），它拥有一些数学常数属性和数学函数方法；</li></ul></li><li>Math 常见的属性： <ul><li>Math.PI：圆周率，约等于 3.14159；</li></ul></li><li>Math 常见的方法： <ul><li>Math.floor：向下舍入取整</li><li>Math.ceil：向上舍入取整</li><li>Math.round：四舍五入取整</li><li>Math.random：生成 0~1 的随机数（包含 0，不包含 1）</li><li>Math.pow(x, y)：返回 x 的 y 次幂</li></ul></li>",3),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类" aria-hidden="true">#</a> String 类</h3><ul><li>String 常见的属性： <ul><li>length：获取字符串的长度；</li></ul></li><li>操作一：访问字符串的字符 <ul><li>通过字符串的索引 str[0]</li><li>通过 str.charAt(pos)方法</li><li>它们的区别是索引的方式没有找到会返回 undefined，而 charAt 没有找到会返回空字符串；</li></ul></li></ul><p>字符串在定义后是不可以修改的，在我们改变很多字符串的操作中，都是生成了一个新的字符串；</p><ul><li>toLowerCase()：将所有的字符转成小写；</li><li>toUpperCase() ：将所有的字符转成大写；</li></ul><p>在一个字符串中查找或者获取另外一个字符串</p><ol><li><p>查找字符串位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从position开始，查找searchString索引，如果没找到返回-1</span>
str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchString<span class="token punctuation">,</span> position<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>是否包含字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从position开始，查找serachString索引，返回true/false</span>
str<span class="token punctuation">.</span><span class="token function">incluedes</span><span class="token punctuation">(</span>serachString<span class="token punctuation">,</span> position<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以 xxx 开头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从position开始，判断是否以serachString开头</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>serachString<span class="token punctuation">[</span><span class="token punctuation">,</span> position<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>以 xxx 结尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从position开始，判断是否以serachString结尾</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>serachString<span class="token punctuation">,</span> position<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>替换字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查找到对应的字符串，并且使用新的字符串进行替代；</span>
<span class="token comment">// 也可以传入一个正则表达式来查找，也可以传入一个函数来替换；</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexp<span class="token operator">|</span>substr<span class="token punctuation">,</span> newSubStr<span class="token operator">|</span><span class="token keyword">function</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>拼接字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span>strN<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除首位空格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取子字符串</p><p><img src="`+o+`" alt="获取子字符串"> 推荐使用 slice 方法</p></li><li><p>字符串分割</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// separator：以什么字符串进行分割，也可以是一个正则表达式；limit：限制返回片段的数量；</span>
str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"},j=s(`<h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>一种有序的集合，里面的元素是按照某一个顺序来排列的；</p><ul><li>这个有序的集合，我们可以通过索引来获取到它；</li><li>这个结构就是数组（Array）</li><li>数组是一种特殊的对象类型；</li></ul><h4 id="数组的创建方式" tabindex="-1"><a class="header-anchor" href="#数组的创建方式" aria-hidden="true">#</a> 数组的创建方式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组的基本操作" tabindex="-1"><a class="header-anchor" href="#数组的基本操作" aria-hidden="true">#</a> 数组的基本操作</h4><ul><li>访问数组中的元素：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改数组中的元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;小明&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>删除和添加元素虽然也可以通过索引来直接操作，但是开发中很少这样操作</p><ul><li><p>在数组的尾端添加或删除元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 在末端添加元素</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 从末端取出一个元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在数组的首端添加或删除元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 取出队列首端的一个元素，整个数组元素向前前移动；</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在首端添加元素，整个其他数组元素向后移动；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>push/pop 方法运行的比较快，而 shift/unshift 比较慢。</p></li></ul></li><li><p>在中间某个位置添加或者删除元素 arr.splice 方法可以说是处理数组的利器，它可以做所有事情：添加，删除和替换元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从start开始</span>
<span class="token comment">// deleteCount：要删除的个数，0/负数表示不删除</span>
<span class="token comment">// item1,item2：在添加元素时，需要添加的个数</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span>deleteCount<span class="token punctuation">[</span><span class="token punctuation">,</span>item1<span class="token punctuation">[</span><span class="token punctuation">,</span>item2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 删除一个元素</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;小张&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 新增一个元素</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;小张&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 替换一个元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这个方法会修改原数组</p></li></ul><h4 id="length-属性" tabindex="-1"><a class="header-anchor" href="#length-属性" aria-hidden="true">#</a> length 属性</h4><ul><li><p>length 属性用于获取数组的长度：</p><ul><li>当我们修改数组的时候，length 属性会自动更新。</li></ul></li><li><p>length 属性的另一个有意思的点是它是可写的。</p><ul><li><p>如果我们手动增加一个大于默认 length 的数值，那么会增加数组的长度。</p></li><li><p>但是如果我们减少它，数组就会被截断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;小张&#39;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;小明&#39;,&#39;小张&#39;,empty * 3]</span>
arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;小明&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>清空数组最简单的方法就是：arr.length = 0</p></li></ul><h4 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历" aria-hidden="true">#</a> 数组的遍历</h4><ul><li>普通 for 循环遍历：</li><li>for..in 遍历，获取到索引值：</li><li>for..of 遍历，获取到每一个元素：</li></ul><h4 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法" aria-hidden="true">#</a> 数组方法</h4><p>slice、cancat、 join</p><ul><li>arr.slice 方法：用于对数组进行截取（类似于字符串的 slice 方法）。 <ul><li>包含 bigin 元素，但是不包含 end 元素；</li></ul></li><li>arr.concat 方法：创建一个新数组，其中包含来自于其他数组和其他项的值。</li><li>arr.join 方法： 将一个数组的所有元素连接成一个字符串并返回这个字符串。</li></ul><p>查找元素</p><ul><li><p>arr.indexOf 方法： 查找某个元素的索引</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从 fromIndex 开始查找，如果找到返回对应的索引，没有找到返回-1；</span>
<span class="token comment">// 也有对应的从最后位置开始查找的 lastIndexOf 方法</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span>fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>arr.includes 方法：判断数组是否包含某个元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从索引 from 开始搜索 item，如果找到则返回 true（如果没找到，则返回 false）。</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span>fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>find 和 findIndex 直接查找元素或者元素的索引（ES6 之后新增的语法）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>sort 方法也是一个高阶函数，用于对数组进行排序，并且生成一个排序后的新数组：</p></li><li><p>reverse 方法将数组中元素的位置颠倒，并返回该数组。</p></li><li><p>forEach 遍历数组，并且让数组中每一个元素都执行一次对应的方法；</p></li><li><p>map</p><ul><li>map() 方法创建一个新数组；</li><li>这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成；</li></ul></li><li><p>filter</p><ul><li>filter() 方法创建一个新数组；</li><li>新数组中只包含每个元素调用函数返回为 true 的元素；</li></ul></li><li><p>reduce</p><ul><li>用于计算数组中所有元素的总和；</li><li>对数组中的每个元素按序执行一个由您提供的 reducer 函数；</li><li>每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值；</li></ul></li></ul><h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间" aria-hidden="true">#</a> 时间</h2><ul><li>英国伦敦的皇家格林威治天文台的标准时间（刚好在本初子午线经过的地方），这个时间也称之为 GMT（Greenwich Mean Time）。其他时区根据标准时间来确定自己的时间，往东的时区（GMT+hh:mm），往西的时区（GMT+hh:mm）；</li><li>但是，根据公转有一定的误差，也会造成 GMT 的时间会造成一定的误差，于是就提出了根据原子钟计算的标准时间 UTC（Coordinated Universal Time）</li><li>目前 GMT 依然在使用，主要表示的是某个时区中的时间，而 UTC 是标准的时间。</li></ul><p><img src="`+u+`" alt="时区对比图"></p><h3 id="date-对象" tabindex="-1"><a class="header-anchor" href="#date-对象" aria-hidden="true">#</a> Date 对象</h3><p>在 JavaScript 中我们使用 Date 来表示和处理时间。</p><ul><li>Date 的构造函数有如下用法：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> monthIndex <span class="token punctuation">[</span><span class="token punctuation">,</span> day <span class="token punctuation">[</span><span class="token punctuation">,</span> hours <span class="token punctuation">[</span><span class="token punctuation">,</span> minutes <span class="token punctuation">[</span><span class="token punctuation">,</span> seconds <span class="token punctuation">[</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Mon Mar 06 2023 16:16:18 GMT+0800 (中国标准时间)</span>
<span class="token keyword">const</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// Thu Jan 01 1970 08:00:01 GMT+0800 (中国标准时间)</span>
<span class="token keyword">const</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2023-03-06&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Mon Mar 06 2023 08:00:00 GMT+0800 (中国标准时间)</span>
<span class="token keyword">const</span> date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">06</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// Thu Apr 06 2023 16:15:30 GMT+0800 (中国标准时间)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dateString 时间的表示方式</p><ul><li>日期的表示方式有两种：RFC 2822 标准 或者 ISO 8601 标准。</li><li>默认打印的时间格式是 RFC 2822 标准的：</li><li>我们也可以将其转化成 ISO 8601 标准的： <ul><li>YYYY：年份，0000 ~ 9999</li><li>MM：月份，01 ~ 12</li><li>DD：日，01 ~ 31</li><li>T：分隔日期和时间，没有特殊含义，可以省略</li><li>HH：小时，00 ~ 24</li><li>mm：分钟，00 ~ 59</li><li>ss：秒，00 ~ 59</li><li>.sss：毫秒</li><li>Z：时区</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2023-03-06T08:19:21.891Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Date 获取信息的方法</p><ul><li>getFullYear()：获取年份（4 位数）；</li><li>getMonth()：获取月份，从 0 到 11；</li><li>getDate()：获取当月的具体日期，从 1 到 31（方法名字有点迷）；</li><li>getDay()：获取一周中的第几天，从 0（星期日）到 6（星期六）</li><li>getHours()：获取小时；</li><li>getMinutes()：获取分钟；</li><li>getSeconds()：获取秒钟；</li><li>getMilliseconds()：获取毫秒；</li></ul><p>Date 设置信息的方法</p><ul><li>setFullYear(year, [month], [date])</li><li>setMonth(month, [date])</li><li>setDate(date)</li><li>setHours(hour, [min], [sec], [ms])</li><li>setMinutes(min, [sec], [ms])</li><li>setSeconds(sec, [ms])</li><li>setMilliseconds(ms)</li><li>setTime(milliseconds)</li></ul><p>Date 获取 Unix 时间戳</p><ul><li>Unix 时间戳：它是一个整数值，表示自 1970 年 1 月 1 日 00:00:00 UTC 以来的毫秒数。</li><li>在 JavaScript 中，我们有多种方法可以获取这个时间戳： <ol><li>new Date().getTime()</li><li>new Date().valueOf()</li><li>+new Date()</li><li>Date.now()</li></ol></li></ul><p>Date.parse 方法</p><ul><li>Date.parse(str) 方法可以从一个字符串中读取日期，并且输出对应的 Unix 时间戳。</li><li>Date.parse(str) ： <ul><li>作用等同于 new Date(dateString).getTime() 操作；</li><li>需要符合 RFC2822 或 ISO 8601 日期格式的字符串； <ul><li>比如 YYYY-MM-DDTHH:mm:ss.sssZ</li></ul></li><li>其他格式也许也支持，但结果不能保证一定正常；</li><li>如果输入的格式不能被解析，那么会返回 NaN；</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;2023-03-06T08:08:08.666Z&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment">// 1678090088666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function x(w,_){const e=i("ExternalLinkIcon");return l(),c("div",null,[d,n("ul",null,[k,n("li",null,[n("a",m,[a("更多 Number 的知识"),t(e)])])]),v,n("ul",null,[h,n("li",null,[n("a",b,[a("Math 中还有很多其他数学相关的方法"),t(e)])])]),g,n("p",null,[n("a",f,[a("更多的字符串的补充内容"),t(e)])]),j])}const y=p(r,[["render",x],["__file","内置类.html.vue"]]);export{y as default};
