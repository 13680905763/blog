import{_ as l,p as i,q as e,a1 as a}from"./framework-204010b2.js";const n="/blog/img/web/css/inherited.jpg",d={},r=a('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ==</h1><h2 id="css-的属性继承" tabindex="-1"><a class="header-anchor" href="#css-的属性继承" aria-hidden="true">#</a> CSS 的属性继承</h2><p>CSS 的某些属性具有继承性(Inherited):</p><ul><li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性;</li><li>当然, 如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高);</li></ul><p>常见的继承属性</p><p><img src="'+n+'" alt="继承"></p><h2 id="css-属性的层叠" tabindex="-1"><a class="header-anchor" href="#css-属性的层叠" aria-hidden="true">#</a> CSS 属性的层叠</h2><p>CSS 的翻译是层叠样式表, 什么是层叠呢?</p><ul><li>对于一个元素来说, 相同一个属性我们可以通过不同的选择器给它进行多次设置;</li><li>那么属性会被一层层覆盖上去;</li><li>但是最终只有一个会生效;</li></ul><p>那么多个样式属性覆盖上去, 哪一个会生效呢?</p><ul><li>判断一: 选择器的权重, 权重大的生效, 根据权重可以判断出优先级;</li><li>判断二: 先后顺序, 权重相同时, 后面设置的生效;</li></ul><h3 id="选择器的权重" tabindex="-1"><a class="header-anchor" href="#选择器的权重" aria-hidden="true">#</a> 选择器的权重</h3><p>为了方便比较 CSS 属性的优先级，可以给 CSS 属性所处的环境定义一个权值（权重）</p><ul><li>!important：10000</li><li>内联样式：1000</li><li>id 选择器：100</li><li>类选择器、属性选择器、伪类：10</li><li>元素选择器、伪元素：1</li><li>通配符：0</li></ul><h2 id="元素的类型" tabindex="-1"><a class="header-anchor" href="#元素的类型" aria-hidden="true">#</a> 元素的类型</h2><p>div 是块级元素会独占一行, span 是行内级元素会在同一行显示.</p><p>到底什么是块级元素, 什么是行内级元素呢?</p><p>HTML 定义元素类型的思路:</p><ul><li>HTML 元素有很多, 比如 h 元素/p 元素/div 元素/span 元素/img 元素/a 元素等等;</li><li>当我们把这个元素放到页面上时, 这个元素到底占据页面中一行多大的空间呢? ✓ 为什么我们这里只说一行呢? 因为垂直方向的高度通常是内容决定的;</li><li>比如一个 h1 元素的标题, 我们必然是希望它独占一行的, 其他的内容不应该和我的标题放在一起;</li><li>比如一个 p 元素的段落, 必然也应该独占一行, 其他的内容不应该和我的段落放在一起;</li><li>而类似于 img/span/a 元素, 通常是对内容的某一个细节的特殊描述, 没有必要独占一行;</li></ul><p>为了区分哪些元素需要独占一行, 哪些元素不需要独占一行, HTML 将元素区分(本质是通过 CSS 的)成了两类:</p><ul><li>块级元素（block-level elements）: 独占父元素的一行</li><li>行内级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示</li></ul><h3 id="修改元素类型" tabindex="-1"><a class="header-anchor" href="#修改元素类型" aria-hidden="true">#</a> 修改元素类型</h3><p>div 之所以是块级元素仅仅是因为浏览器默认设置了 display 属性而已;</p><p>display 属性，能修改元素的显示类型，有 4 个常用值</p><ul><li>block：让元素显示为块级元素</li><li>inline：让元素显示为行内级元素</li><li>inline-block：让元素同时具备行内级、块级元素的特征</li><li>none：隐藏元素</li></ul><p>display 特性</p><ol><li>block 元素: <ul><li>独占父元素的一行</li><li>可以随意设置宽高</li><li>高度默认由内容决定</li></ul></li><li>inline-block 元素: <ul><li>跟其他行内级元素在同一行显示</li><li>可以随意设置宽高</li><li>可以这样理解 <ul><li>对外来说，它是一个行内级元素</li><li>对内来说，它是一个块级元素</li></ul></li></ul></li><li>inline: <ul><li>跟其他行内级元素在同一行显示;</li><li>不可以随意设置宽高;</li><li>宽高都由内容决定;</li></ul></li></ol><p>[注意事项]</p><ul><li>块级元素、inline-block 元素 <ul><li>一般情况下，可以包含其他任何元素（比如块级元素、行内级元素、inline-block 元素）</li><li>特殊情况，p 元素不能包含其他块级元素</li></ul></li><li>行内级元素（比如 a、span、strong 等） <ul><li>一般情况下，只能包含行内级元素</li></ul></li></ul><h3 id="元素隐藏方法" tabindex="-1"><a class="header-anchor" href="#元素隐藏方法" aria-hidden="true">#</a> 元素隐藏方法</h3><ol><li>display 设置为 none <ul><li>元素不显示出来, 并且也不占据位置, 不占据任何空间(和不存在一样);</li></ul></li><li>visibility 设置为 hidden <ul><li>设置为 hidden, 虽然元素不可见, 但是会占据元素应该占据的空间;</li><li>默认为 visible, 元素是可见的;</li></ul></li><li>rgba 设置颜色, 将 a 的值设置为 0 <ul><li>rgba 的 a 设置的是 alpha 值, 可以设置透明度, 不影响子元素;</li></ul></li><li>opacity 设置透明度, 设置为 0 <ul><li>设置整个元素的透明度, 会影响所有的子元素;</li></ul></li></ol>',31),h=[r];function s(p,u){return i(),e("div",null,h)}const c=l(d,[["render",s],["__file","继承-层叠-元素类型.html.vue"]]);export{c as default};
