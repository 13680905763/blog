import{_ as l,p as i,q as a,Q as s,a1 as e}from"./framework-204010b2.js";const t="/blog/img/web/css/flex.jpg",n="/blog/img/web/css/justify-content.jpg",r="/blog/img/web/css/align-item.jpg",o="/blog/img/web/css/align-content.jpg",f="/blog/img/web/css/order.jpg",c="/blog/img/web/css/wenti.jpg",x={},p=e('<h1 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> Layout</h1><h2 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> Flex</h2><p>弹性布局 行-列|</p><ul><li>开启了 flex 布局的元素叫 flex container</li><li>flex container 里面的直接子元素叫做 flex item</li></ul><p>当 flex container 中的子元素变成了 flex item 时, 具备一下特点:</p><ul><li>flex item 的布局将受 flex container 属性的设置来进行控制和布局;</li><li>flex item 不再严格区分块级元素和行内级元素;</li><li>flex item 默认情况下是包裹内容的, 但是可以设置宽度和高度;</li></ul><p>设置 display 属性为 flex 或者 inline-flex 可以成为 flex container</p><ul><li>flex： flex container 以 block-level 形式存在</li><li>inline-flex： flex container 以 inline-level 形式存在</li></ul><p><img src="'+t+'" alt="flex"></p><p>flex container</p><ul><li>flex-flow</li><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><p>flex items</p><ul><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>order</li><li>align-self</li><li>flex</li></ul><h3 id="flex-direction" tabindex="-1"><a class="header-anchor" href="#flex-direction" aria-hidden="true">#</a> flex-direction</h3><p>设置主轴方向</p><p>row（默认值）、row-reverse、column、column-reverse</p><h3 id="flex-wrap" tabindex="-1"><a class="header-anchor" href="#flex-wrap" aria-hidden="true">#</a> flex-wrap</h3><p>决定 flex container 是单行还是多行</p><ul><li>nowrap（默认）：单行</li><li>wrap：多行</li><li>wrap-reverse：多行（对比 wrap，cross start 与 cross end 相反）</li></ul><h3 id="flex-flow" tabindex="-1"><a class="header-anchor" href="#flex-flow" aria-hidden="true">#</a> flex-flow</h3><p>flex-flow 属性是 flex-direction 和 flex-wrap 的简写。</p><h3 id="justify-content" tabindex="-1"><a class="header-anchor" href="#justify-content" aria-hidden="true">#</a> justify-content</h3><p>决定 flex items 在主轴上的对齐方式</p><ul><li>flex-start（默认值）：与 main start 对齐</li><li>flex-end：与 main end 对齐</li><li>center：居中对齐</li><li>space-between： <ul><li>flex items 之间的距离相等</li><li>与 main start、main end 两端对齐</li></ul></li><li>space-around： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离是 flex items 之间距离的一半</li></ul></li><li>space-evenly： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离 等于 flex items 之间的距离</li></ul></li></ul><p><img src="'+n+'" alt="justify-content"></p><h3 id="align-item" tabindex="-1"><a class="header-anchor" href="#align-item" aria-hidden="true">#</a> align-item</h3><p>决定了 flex items 在垂直轴上的对齐方式</p><ul><li>normal：在弹性布局中，效果和 stretch 一样</li><li>stretch：当 flex items 在交叉轴方向的 size 为 auto 时，会 自动拉伸至填充 flex container</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>baseline：与基准线对齐</li></ul><p><img src="'+r+'" alt="align-item"></p><h3 id="align-content" tabindex="-1"><a class="header-anchor" href="#align-content" aria-hidden="true">#</a> align-content</h3><p>决定了多行 flex items 在交叉轴上的对齐方式，用法与 justify-content 类似</p><ul><li>stretch（默认值）：与 align-items 的 stretch 类似</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>space-between： <ul><li>flex items 之间的距离相等</li><li>与 cross start、cross end 两端对齐</li></ul></li><li>space-around： <ul><li>flex items 之间的距离相等</li><li>flex items 与 cross start、cross end 之间的距离是 flex items 之间距离的一半</li></ul></li><li>space-evenly： <ul><li>flex items 之间的距离相等</li><li>flex items 与 cross start、cross end 之间的距离 等于 flex items 之间的距离</li></ul></li></ul><p><img src="'+o+'" alt="align-content"></p><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> order</h3><p>决定了 flex items 的排布顺序</p><p>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</p><ul><li>默认值是 0</li></ul><p><img src="'+f+'" alt="order"></p><h3 id="align-self" tabindex="-1"><a class="header-anchor" href="#align-self" aria-hidden="true">#</a> align-self</h3><p>flex items 可以通过 align-self 覆盖 flex container 设置的 align-items</p><ul><li>auto（默认值）：遵从 flex container 的 align-items 设置</li><li>stretch、flex-start、flex-end、center、baseline，效果跟 align-items 一致</li></ul><h3 id="flex-grow" tabindex="-1"><a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a> flex-grow</h3><p>决定了 flex items 如何扩展(拉伸/成长)</p><ul><li>可以设置任意非负数字（正小数、正整数、0），默认值是 0</li><li>当 flex container 在主轴方向上有剩余 size 时，flex-grow 属性才会有效 <ul><li>如果所有 flex items 的 flex-grow 总和 sum 超过 1，每个 flex item 扩展的 size 为</li></ul></li><li>flex container 的剩余 size * flex-grow / sum</li></ul>',44),d=e(`<h3 id="flex-shrink" tabindex="-1"><a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a> flex-shrink</h3><p>flex-shrink 决定了 flex items 如何收缩(缩小)</p><ul><li>可以设置任意非负数字（正小数、正整数、0），默认值是 1</li><li>当 flex items 在主轴方向上超过了 flex container 的 size，flex-shrink 属性才会有效 <ul><li>如果所有 flex items 的 flex-shrink 总和超过 1，每个 flex item 收缩的 size 为</li></ul></li><li>flex items 超出 flex container 的 size * 收缩比例 / 所有 flex items 的收缩比例之和</li></ul><p>flex items 收缩后的最终 size 不能小于 min-width\\min-height</p><h3 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a> flex-basis</h3><ul><li>flex-basis 用来设置 flex items 在主轴方向上的 基础尺寸（会被内容拉伸） <ul><li>auto（默认值）、具体的宽度数值（100px）</li></ul></li><li>决定 flex items 最终 base size 的因素，从优先级高到低 <ul><li>max-width\\max-height\\min-width\\min-height</li><li>flex-basis</li><li>width\\height</li><li>内容本身的 size</li></ul></li></ul><h3 id="flex-属性" tabindex="-1"><a class="header-anchor" href="#flex-属性" aria-hidden="true">#</a> flex 属性</h3><p>flex 是 flex-grow || flex-shrink || flex-basis 的简写,flex 属性可以指定 1 个，2 个或 3 个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>flex <span class="token operator">=</span> none <span class="token operator">|</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span><span class="token string">&#39;flex-grow&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token string">&#39;flex-shrink&#39;</span><span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token operator">||</span> <span class="token operator">&lt;</span><span class="token string">&#39;flex-basis&#39;</span><span class="token operator">&gt;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="思考-如下布局如何解决对其问题" tabindex="-1"><a class="header-anchor" href="#思考-如下布局如何解决对其问题" aria-hidden="true">#</a> 思考: 如下布局如何解决对其问题</h3><p><img src="`+c+'" alt="flex-grow"> 往后面加（列数-2 个）span 填充</p>',11);function h(m,u){return i(),a("div",null,[p,s(" ![flex-grow](/img/web/css/flex-grow.jpg) "),d])}const b=l(x,[["render",h],["__file","flex.html.vue"]]);export{b as default};
