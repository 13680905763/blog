import{_ as i,p as l,q as a,a1 as e}from"./framework-204010b2.js";const n="/blog/img/web/javascript/js-base/分支-循环/执行方式.jpg",s="/blog/img/web/javascript/js-base/分支-循环/if.jpg",t="/blog/img/web/javascript/js-base/分支-循环/while.jpg",r="/blog/img/web/javascript/js-base/分支-循环/do-while.jpg",o="/blog/img/web/javascript/js-base/分支-循环/for.jpg",u={},c=e('<h1 id="分支-循环" tabindex="-1"><a class="header-anchor" href="#分支-循环" aria-hidden="true">#</a> 分支-循环</h1><p>程序有三种不同的执行方式</p><ul><li>顺序 ： 从上向下，顺序执行代码</li><li>分支 ： 根据条件判断，决定执行代码的 分支</li><li>循环 ： 让 特定代码 重复 执行</li></ul><p><img src="'+n+'" alt="执行方式"></p><h2 id="代码块" tabindex="-1"><a class="header-anchor" href="#代码块" aria-hidden="true">#</a> 代码块</h2><ul><li>代码块是多行执行代码的集合，通过一个花括号{}放到了一起。 <ul><li>在开发中，一行代码很难完成某一个特定的功能，我们就会将这些代码放到一个代码块中</li></ul></li><li>在 JavaScript 中，我们可以通过流程控制语句来决定如何执行一个代码块： <ul><li>通常会通过一些关键字来告知 js 引擎代码要如何被执行；</li><li>比如分支语句、循环语句对应的关键字等；</li></ul></li></ul><h2 id="分支结构" tabindex="-1"><a class="header-anchor" href="#分支结构" aria-hidden="true">#</a> 分支结构</h2><ul><li>分支结构 <ul><li>分支结构的代码就是让我们根据条件来决定代码的执行</li><li>分支结构的语句被称为判断结构或者选择结构.</li><li>几乎所有的编程语言都有分支结构（C、C++、OC、JavaScript 等等）</li></ul></li><li>JavaScript 中常见的分支结构有： <ul><li>if 分支结构</li><li>switch 分支结构</li></ul></li></ul><h3 id="if-分支语句" tabindex="-1"><a class="header-anchor" href="#if-分支语句" aria-hidden="true">#</a> if 分支语句</h3><p>if 分支结构有三种：</p><ul><li>单分支结构 <ul><li>if..</li></ul></li><li>多分支结构 <ul><li>if..else..</li><li>if..else if..else..</li></ul></li></ul><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h4><ol><li><p>如果代码块中只有一行代码，那么{}可以省略：</p></li><li><p>if (…) 语句会计算圆括号内的表达式，并将计算结果转换为布尔型（Boolean）。</p><ul><li>转换规则和 Boolean 函数的规则一致；</li><li>数字 0、空字符串 “”、null、undefined 和 NaN 都会被转换成 false。 <ul><li>因为它们被称为“假值（falsy）”；</li></ul></li><li>其他值被转换为 true，所以它们被称为“真值（truthy）”；</li></ul></li></ol><p><img src="'+s+'" alt="if"></p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><ul><li>循环 是一种重复运行同一代码的方法。 <ul><li>如果是对某一个列表进行循环操作，我们通常也会称之为 遍历（traversal）或者迭代（iteration）；</li></ul></li><li>在 JavaScript 中支持三种循环方式： <ul><li>while 循环；</li><li>do..while 循环；</li><li>for 循环；</li></ul></li></ul><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h3><ul><li>while 循环的语法如下： <ul><li>当条件成立时，执行代码块；</li><li>当条件不成立时，跳出代码块；</li></ul></li><li>如果条件一直成立（为 true），那么会产生死循环。 <ul><li>这个时候必须通过关闭页面来停止死循环；</li><li>开发中一定要避免死循环的产生；</li></ul></li></ul><p><img src="'+t+'" alt="while"></p><h3 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环" aria-hidden="true">#</a> do..while 循环</h3><ul><li>do..while 循环和 while 循环非常像，二者经常可以相互替代(不常用) <ul><li>但是 do..while 的特点是不管条件成不成立，do 循环体都会先执行一次；</li></ul></li><li>通常我们更倾向于使用 while 循环。</li></ul><p><img src="'+r+`" alt="do-while"></p><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h3><p>for 循环更加复杂，但它是最常使用的循环形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>begin<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 循环代码块</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 循环代码块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+'" alt="for"></p><ul><li>begin 执行一次，然后进行迭代：每次检查 condition 后，执行 body 和 step</li></ul><p>循环的嵌套（日常开发使用不算多，在一些算法中比较常见）</p><ul><li>在开发中，某些情况下一次循环是无法达到目的的，我们需要循环中嵌套循环；</li></ul><h2 id="循环控制" tabindex="-1"><a class="header-anchor" href="#循环控制" aria-hidden="true">#</a> 循环控制</h2><ul><li>循环的跳转（控制）： <ul><li>在执行循环过程中, 遇到某一个条件时, 我们可能想要做一些事情；</li><li>比如循环体不再执行(即使没有执行完), 跳出循环；</li><li>比如本次循环体不再执行, 执行下一次的循环体；</li></ul></li><li>循环的跳转控制</li><li>break: 直接跳出循环, 循环结束 <ul><li>break 某一条件满足时，退出循环，不再执行后续重复的代码</li></ul></li><li>continue: 跳过本次循环次, 执行下一次循环体 <ul><li>continue 指令是 break 的“轻量版”。</li><li>continue 某一条件满足时，不执行后续重复的代码</li></ul></li></ul><h2 id="循环的总结" tabindex="-1"><a class="header-anchor" href="#循环的总结" aria-hidden="true">#</a> 循环的总结</h2><ul><li>while —— 每次迭代之前都要检查条件；</li><li>do..while —— 每次迭代后都要检查条件；</li><li>for (;;) —— 每次迭代之前都要检查条件，可以使用其他设置；</li></ul><p>break/continue 可以对循环进行控制。</p>',34),p=[c];function d(h,f){return l(),a("div",null,p)}const m=i(u,[["render",d],["__file","分支-循环.html.vue"]]);export{m as default};
