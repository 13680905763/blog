import{_ as a,p as e,q as n,a1 as i}from"./framework-204010b2.js";const s="/blog/img/web/css/other-property/case1.jpg",l="/blog/img/web/css/other-property/case2.jpg",t="/blog/img/web/css/other-property/case3.jpg",o="/blog/img/web/css/other-property/case4.jpg",r="/blog/img/web/css/other-property/case5.jpg",p={},c=i('<h1 id="其他的一些属性" tabindex="-1"><a class="header-anchor" href="#其他的一些属性" aria-hidden="true">#</a> 其他的一些属性</h1><h2 id="vertical-align" tabindex="-1"><a class="header-anchor" href="#vertical-align" aria-hidden="true">#</a> vertical-align</h2><p>vertical-align 会影响 行内块级元素 在一个 行盒 中垂直方向的位置</p><p>div 没有设置高度的时候</p><ul><li>没有内容，没有高度</li><li>有内容，内容有行高，内容撑起来高度</li></ul><p>行高为什么可以撑起 div 的高度？</p><ul><li>这是因为 line boxes 的存在，并且 line-boxes 有一个特性，包裹每行的 inline level</li><li>而其中的文字是有行高的，必须将整个行高包裹进去，才算包裹这个 line-level</li></ul><p>那么，进一步思考：</p><ul><li>如果这个 div 中有图片，文字，inline-block，甚至他们设置了 margin 这些属性呢？</li></ul><h3 id="深入理解-vertical-align-–-不同情况分析" tabindex="-1"><a class="header-anchor" href="#深入理解-vertical-align-–-不同情况分析" aria-hidden="true">#</a> 深入理解 vertical-align – 不同情况分析</h3><h4 id="情况一-只有文字时-line-boxes-如何包裹内容-注意-红色是包裹的-div-下面也都一样" tabindex="-1"><a class="header-anchor" href="#情况一-只有文字时-line-boxes-如何包裹内容-注意-红色是包裹的-div-下面也都一样" aria-hidden="true">#</a> 情况一：只有文字时，line boxes 如何包裹内容？（注意：红色是包裹的 div，下面也都一样）</h4><p><img src="'+s+'" alt="case1"></p><h4 id="情况二-有图片-有文字时-line-boxes-如何包裹内容" tabindex="-1"><a class="header-anchor" href="#情况二-有图片-有文字时-line-boxes-如何包裹内容" aria-hidden="true">#</a> 情况二：有图片，有文字时，line-boxes 如何包裹内容？</h4><p><img src="'+l+'" alt="case2"></p><h4 id="情况三-有图片-有文字-有-inline-block-比图片要大-如何包裹内容" tabindex="-1"><a class="header-anchor" href="#情况三-有图片-有文字-有-inline-block-比图片要大-如何包裹内容" aria-hidden="true">#</a> 情况三：有图片，有文字，有 inline-block（比图片要大）如何包裹内容？</h4><p><img src="'+t+'" alt="case3"></p><h4 id="情况四-有图片-有文字-有-inline-block-比图片要大-而且设置了-margin-bottom-如何包裹内容" tabindex="-1"><a class="header-anchor" href="#情况四-有图片-有文字-有-inline-block-比图片要大-而且设置了-margin-bottom-如何包裹内容" aria-hidden="true">#</a> 情况四：有图片，有文字，有 inline-block（比图片要大）而且设置了 margin-bottom，如何包裹内容？</h4><p><img src="'+o+'" alt="case4"></p><h4 id="情况五-有图片、文字、inline-block-比图片要大-而且设置了-margin-bottom-并且有文字-如何包裹内容" tabindex="-1"><a class="header-anchor" href="#情况五-有图片、文字、inline-block-比图片要大-而且设置了-margin-bottom-并且有文字-如何包裹内容" aria-hidden="true">#</a> 情况五：有图片、文字、inline-block（比图片要大）而且设置了 margin-bottom 并且有文字，如何包裹内容？</h4><p><img src="'+r+`" alt="case5"></p><h3 id="vertical-align-的-baseline" tabindex="-1"><a class="header-anchor" href="#vertical-align-的-baseline" aria-hidden="true">#</a> vertical-align 的 baseline</h3><p>line-boxes 一定会想办法包裹住当前行中所有的内容</p><p>为什么对齐方式千奇百怪呢？默认 baseline 对齐</p><p>baseline 都是谁呢？</p><ul><li>文本的 baseline 是字母 x 的下方</li><li>Inline-block 默认的 baseline 是 margin-bottom 的底部（没有，就是盒子的底部）</li><li>Inline-block 有文本时，baseline 是最后一行文本的 x 的下方</li></ul><h3 id="vertical-align-的其他值" tabindex="-1"><a class="header-anchor" href="#vertical-align-的其他值" aria-hidden="true">#</a> vertical-align 的其他值</h3><ul><li>baseline(默认值)：基线对齐（你得先明白什么是基线）</li><li>top：把行内级盒子的顶部跟 line boxes 顶部对齐</li><li>middle：行内级盒子的中心点与父盒基线加上 x-height 一半的线对齐</li><li>bottom：把行内级盒子的底部跟 line box 底部对齐</li><li>&lt;percentage&gt;：把行内级盒子提升或者下降一段距离（距离相对于 line-height 计算\\元素高度）， 0%意味着同 baseline 一 样</li><li>&lt;length&gt;：把行内级盒子提升或者下降一段距离，0cm 意味着同 baseline 一样</li></ul><h3 id="解决图片下边缘的间隙方法" tabindex="-1"><a class="header-anchor" href="#解决图片下边缘的间隙方法" aria-hidden="true">#</a> 解决图片下边缘的间隙方法</h3><ol><li>设置成 top/middle/bottom</li><li>将图片设置为 block 元素</li></ol><h2 id="white-space" tabindex="-1"><a class="header-anchor" href="#white-space" aria-hidden="true">#</a> white-space</h2><p>white-space 用于设置空白处理和换行规则</p><ul><li>normal：合并所有连续的空白，允许单词超屏时自动换行</li><li>nowrap：合并所有连续的空白，不允许单词超屏时自动换行</li><li>pre：阻止合并所有连续的空白，不允许单词超屏时自动换行</li><li>pre-wrap：阻止合并所有连续的空白，允许单词超屏时自动换行</li><li>pre-line：合并所有连续的空白（但保留换行），允许单词超屏时自动换行</li></ul><h2 id="overflow" tabindex="-1"><a class="header-anchor" href="#overflow" aria-hidden="true">#</a> overflow</h2><p>控制内容溢出时的行为</p><ul><li>visible：溢出的内容照样可见</li><li>hidden：溢出的内容直接裁剪</li><li>scroll：溢出的内容被裁剪，但可以通过滚动机制查看 <ul><li>会一直显示滚动条区域，滚动条区域占用的空间属于 width、height</li></ul></li><li>auto：自动根据内容是否溢出来决定是否提供滚动机制</li></ul><h2 id="text-overflow" tabindex="-1"><a class="header-anchor" href="#text-overflow" aria-hidden="true">#</a> text-overflow</h2><p>text-overflow 通常用来设置文字溢出时的行为</p><ul><li>clip：溢出的内容直接裁剪掉（字符可能会显示不完整）</li><li>ellipsis：溢出那行的结尾处用省略号表示</li></ul><p><strong>text-overflow 生效的前提是 overflow 不为 visible</strong>.</p><p>常见的是将 white-space、overflow、text-overflow 一起使用：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器前缀" tabindex="-1"><a class="header-anchor" href="#浏览器前缀" aria-hidden="true">#</a> 浏览器前缀</h2><p>有时候可能会看到有些 CSS 属性名前面带有：-o-、-xv-、-ms-、mso-、-moz-、-webkit-</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方文档专业术语叫做：vendor-specific extensions（供应商特定扩展）</p><p>为什么需要浏览器前缀了？</p><ul><li>CSS 属性刚开始并没有成为标准，浏览器为了防止后续会修改名字给新的属性添加了浏览器前缀；</li></ul><p>上述前缀叫做浏览器私有前缀，只有对应的浏览器才能解析使用</p><ul><li>-o-、-xv-：Opera 等</li><li>-ms-、mso-：IE 等</li><li>-moz-：Firefox 等</li><li>-webkit-：Safari、Chrome 等</li></ul><p>注意：不需要手动添加，后面学习了模块化打包工具会自动添加浏览器前缀</p>`,50),d=[c];function h(u,b){return e(),n("div",null,d)}const v=a(p,[["render",h],["__file","other-property.html.vue"]]);export{v as default};
