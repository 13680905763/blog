import{_ as t,M as o,p as r,q as n,R as i,t as l,N as d,V as h,a1 as a}from"./framework-204010b2.js";const s="/blog/img/web/css/position/normal-flow.jpg",u="/blog/img/web/css/position/relative.jpg",p="/blog/img/web/css/position/position.jpg",c={},m=a('<h1 id="css-元素定位" tabindex="-1"><a class="header-anchor" href="#css-元素定位" aria-hidden="true">#</a> CSS 元素定位</h1><h2 id="normal-flow" tabindex="-1"><a class="header-anchor" href="#normal-flow" aria-hidden="true">#</a> Normal Flow</h2><p>默认情况下，元素都是按照 normal flow 进行排布</p><ul><li>从左到右、从上到下按顺序摆放好</li><li>默认情况下，互相之间不存在层叠现象</li></ul><p><img src="'+s+'" alt="normal-flow"></p><h3 id="margin-padding" tabindex="-1"><a class="header-anchor" href="#margin-padding" aria-hidden="true">#</a> margin-padding</h3><p>在标准流中，可以使用 margin、padding 对元素进行位置调整</p><ul><li>其中 margin 还可以设置负数</li></ul><p>比较明显的缺点是</p><ul><li>设置一个元素的 margin 或者 padding，通常会影响到标准流中其他元素的位置效果</li><li>不便于实现元素层叠的效果</li></ul><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><p>定位能够从文档流中取出元素，并使它们具有不同的行为:</p><ul><li>例如放在另一个元素的上面;</li><li>或者始终保持在浏览器视窗内的同一位置;</li></ul><p>利用 position 可以对元素进行定位</p><ul><li>static：默认值, 静态定位</li></ul><p><em>定位元素</em>：</p><ul><li>relative：相对定位</li><li>absolute：绝对定位</li><li>fixed：固定定位</li><li>sticky：粘性定位</li></ul><h2 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h2><p>position 属性的默认值</p><ul><li>元素按照 normal flow 布局</li><li>left 、right、top、bottom 没有任何作用</li></ul><h2 id="relative" tabindex="-1"><a class="header-anchor" href="#relative" aria-hidden="true">#</a> relative</h2><ul><li><p>元素按照 normal flow 布局</p></li><li><p>通过 left、right、top、bottom 进行定位</p><ul><li>定位参照对象是元素自己原来的位置</li></ul></li><li><p>left、right、top、bottom 用来设置元素的具体位置</p></li></ul><p><img src="'+u+'" alt="relative"></p><p>应用场景</p><p>在不影响其他元素位置的前提下，对当前元素位置进行微调</p><h2 id="fixed" tabindex="-1"><a class="header-anchor" href="#fixed" aria-hidden="true">#</a> fixed</h2>',26),f=i("li",null,"元素脱离 normal flow（脱离标准流、脱标）",-1),g=i("li",null,"当画布滚动时，固定不动",-1),b=a('<h2 id="absolute" tabindex="-1"><a class="header-anchor" href="#absolute" aria-hidden="true">#</a> absolute</h2><ul><li>元素脱离 normal flow（脱离标准流、脱标）</li><li>可以通过 left、right、top、bottom 进行定位 <ul><li>定位参照对象是最邻近的定位祖先元素</li><li>如果找不到这样的祖先元素，参照对象是视口</li></ul></li></ul><p>如果希望子元素相对于父元素进行定位，又不希望父元素脱标，常用解决方案是：</p><ul><li>父元素设置 position: relative（让父元素成为定位元素，而且父元素不脱离标准流）</li><li>子元素设置 position: absolute</li><li>简称为“子绝父相</li></ul><h2 id="absolute-fixed-特点" tabindex="-1"><a class="header-anchor" href="#absolute-fixed-特点" aria-hidden="true">#</a> absolute/fixed 特点</h2><h3 id="特点一" tabindex="-1"><a class="header-anchor" href="#特点一" aria-hidden="true">#</a> 特点一</h3><ol><li>可以随意设置宽高 <ul><li>宽高默认由内容决定</li><li>不再受标准流的约束</li></ul></li><li>不再严格按照从上到下、从左到右排布</li><li>不再严格区分块级(block)、行内级(inline)，行内块级(inline-block)的很多特性都会消失</li><li>不再给父元素汇报宽高数据</li><li>脱标元素内部默认还是按照标准流布局</li></ol><h3 id="特点二" tabindex="-1"><a class="header-anchor" href="#特点二" aria-hidden="true">#</a> 特点二</h3><p>对于绝对定位元素来说</p><ul><li>定位参照对象的宽度 = left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</li><li>定位参照对象的高度 = top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</li></ul><p>如果希望绝对定位元素的宽高和定位参照对象一样，可以给绝对定位元素设置以下属性</p><ul><li>left: 0、right: 0、top: 0、bottom: 0、margin:0</li></ul><p>如果希望绝对定位元素在定位参照对象中居中显示，可以给绝对定位元素设置以下属性</p><ul><li>left: 0、right: 0、top: 0、bottom: 0、margin: auto</li><li>另外，还得设置<strong>具体的宽高值</strong></li></ul><h2 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h2><p>auto -&gt; 交给浏览器你来出来 width: auto;</p><ul><li>行内非替换元素 -&gt; width: 包裹内容</li><li>块级元素 -&gt;width: 包含块的宽度</li><li>绝对定位元素 -&gt; width: 包裹内容</li></ul><h2 id="sticky" tabindex="-1"><a class="header-anchor" href="#sticky" aria-hidden="true">#</a> sticky</h2><ul><li>可以看做是相对定位和固定定位的结合体;</li><li>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点;</li><li>当达到这个阈值点时, 就会变成固定(绝对)定位;</li></ul><h2 id="position-值对比" tabindex="-1"><a class="header-anchor" href="#position-值对比" aria-hidden="true">#</a> position 值对比</h2><p><img src="'+p+'" alt="position"></p><h2 id="z-index" tabindex="-1"><a class="header-anchor" href="#z-index" aria-hidden="true">#</a> z-index</h2><p>z-index 属性用来设置定位元素的层叠顺序（仅对定位元素有效）</p><ul><li>取值可以是正整数、负整数、0</li></ul><p>比较原则</p><ul><li>如果是兄弟关系 <ul><li>z-index 越大，层叠在越上面</li><li>z-index 相等，写在后面的那个元素层叠在上面</li></ul></li><li>如果不是兄弟关系 <ul><li>各自从元素自己以及祖先元素中，找出最邻近的 2 个定位元素进行比较</li><li>而且这 2 个定位元素必须有设置 z-index 的具体数值</li></ul></li></ul>',26);function x(_,w){const e=o("RouterLink");return r(),n("div",null,[m,i("ul",null,[f,i("li",null,[l("可以通过 left、right、top、bottom 进行定位 "),i("ul",null,[i("li",null,[l("定位参照对象是"),d(e,{to:"/web/#%E7%94%BB%E5%B8%83%E5%92%8C%E8%A7%86%E5%8F%A3"},{default:h(()=>[l("视口")]),_:1})])])]),g]),b])}const v=t(c,[["render",x],["__file","position.html.vue"]]);export{v as default};
