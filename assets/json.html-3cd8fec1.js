import{_ as i,p as a,q as e,a1 as l}from"./framework-204010b2.js";const r={},n=l('<h1 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> json</h1><p>JSON 是一种非常重要的数据格式，它并不是编程语言，而是一种可以在服务器和客户端之间传输的数据格式。</p><ul><li>JSON 被使用的场景也越来越多： <ul><li>网络数据的传输 JSON 数据；</li><li>项目的某些配置文件；</li><li>非关系型数据库（NoSQL）将 json 作为存储格式；</li></ul></li></ul><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><ul><li>简单值：数字（Number）、字符串（String，不支持单引号）、布尔类型（Boolean）、null 类型；</li><li>对象值：由 key、value 组成，key 是字符串类型，并且必须添加双引号，值可以是简单值、对象值、数组值；</li><li>数组值：数组的值可以是简单值、对象值、数组值；</li></ul><h2 id="json-序列化" tabindex="-1"><a class="header-anchor" href="#json-序列化" aria-hidden="true">#</a> JSON 序列化</h2><p>在 ES5 中引用了 JSON 全局对象，该对象有两个常用的方法：</p><ul><li>stringify 方法：将 JavaScript 类型转成对应的 JSON 字符串；</li><li>parse 方法：解析 JSON 字符串，转回对应的 JavaScript 类型；</li></ul><h3 id="stringify" tabindex="-1"><a class="header-anchor" href="#stringify" aria-hidden="true">#</a> Stringify</h3><ul><li>JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串： <ul><li>如果指定了一个 replacer 函数，则可以选择性地替换值；</li><li>如果指定的 replacer 是数组，则可选择性地仅包含数组指定的属性；</li></ul></li><li>如果对象本身包含 toJSON 方法，那么会直接使用 toJSON 方法的结果：</li></ul><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse" aria-hidden="true">#</a> parse</h3><ul><li>JSON.parse() 方法用来解析 JSON 字符串，构造由字符串描述的 JavaScript 值或对象。 <ul><li>提供可选的 reviver 函数用以在返回之前对所得到的对象执行变换(操作)</li></ul></li></ul><p>JSON 的方法可以帮我们实现对象的深拷贝</p>',13),t=[n];function s(h,o){return a(),e("div",null,t)}const d=i(r,[["render",s],["__file","json.html.vue"]]);export{d as default};
