import{_ as a,p as n,q as s,a1 as e}from"./framework-204010b2.js";const i="/blog/img/web/javascript/js-advanced/内存管理和闭包/内存分配.jpg",l="/blog/img/web/javascript/js-advanced/内存管理和闭包/引用计数.jpg",t="/blog/img/web/javascript/js-advanced/内存管理和闭包/标记清除.jpg",c={},p=e('<h1 id="内存管理和闭包" tabindex="-1"><a class="header-anchor" href="#内存管理和闭包" aria-hidden="true">#</a> 内存管理和闭包</h1><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><p>代码的执行过程中都是需要给它分配内存的，不同的是某些编程语言需要我们自己手动的管理内存，某些编程语言会可以自动帮助我们管理内存</p><ol><li>分配申请你需要的内存（申请）</li><li>使用分配的内存（存放一些东西，比如对象等）</li><li>不需要使用时，对其进行释放</li></ol><p>JavaScript 的内存管理是自动的</p><ul><li>我们创建的原始值、对象、函数……这一切都会占用内存；</li><li>但是我们并不需要手动来对它们进行管理，JavaScript 引擎会帮助我们处理好它；</li></ul><p>内存分配方式</p><ul><li>JS 对于原始数据类型内存的分配会在执行时， 直接在栈空间进行分配；</li><li>JS 对于复杂数据类型内存的分配会在堆内存中 开辟一块空间，并且将这块空间的指针返回值 变量引用；</li></ul><p><img src="'+i+'" alt="内存分配"></p><h3 id="垃圾回收-garbage-collection" tabindex="-1"><a class="header-anchor" href="#垃圾回收-garbage-collection" aria-hidden="true">#</a> 垃圾回收 （Garbage Collection）</h3><p>内存的大小是有限的，当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间。</p><p>大部分现代的编程语言都是有自己的垃圾回收机制：</p><ul><li>对于那些不再使用的对象，我们都称之为是垃圾，它需要被回收，以释放更多的内存空间；</li><li>而我们的语言运行环境，比如 JavaScript 的运行环境 js 引擎都会内存垃圾回收器；</li></ul><p>GC 算法 – 引用计数</p><ul><li>当一个对象有一个引用指向它时，那么这个对象的引用就+1；</li><li>当一个对象的引用为 0 时，这个对象就可以被销毁掉；</li></ul><p>这个算法有一个很大的弊端就是会产生循环引用； <img src="'+l+'" alt="引用计数"></p><p>GC 算法 – 标记清除</p><ul><li>标记清除的核心思路是可达性（Reachability）</li><li>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些 没有引用到的对象，就认为是不可用的对象；</li><li>这个算法可以很好的解决循环引用的问题；</li></ul><p><img src="'+t+`" alt="标记清除"></p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>一个普通的函数，如果它可以访问外层作用域的自由变量，那么这个函数和周围环境就是一个闭包；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> age <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function r(d,u){return n(),s("div",null,o)}const _=a(c,[["render",r],["__file","内存管理和闭包.html.vue"]]);export{_ as default};
