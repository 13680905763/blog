import{_ as i,p as a,q as l,a1 as n}from"./framework-204010b2.js";const e={},s=n(`<h1 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h1><ul><li>函数在调用时，JavaScript 会默认给 this 绑定一个值；</li><li>this 的绑定和定义的位置（编写的位置）没有关系；</li><li>this 的绑定和调用方式以及调用的位置有关系；</li><li>this 是在运行时被绑定的；</li></ul><p>this 的绑定规则</p><ul><li>默认绑定；</li><li>隐式绑定；</li><li>显示绑定；</li><li>new 绑定；</li></ul><h2 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a> 默认绑定</h2><p>独立的函数调用</p><h2 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a> 隐式绑定</h2><p>通过某个对象进行调用</p><p>创建一个函数的 间接引用，这种情况使用默认绑定规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj1<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="显式绑定" tabindex="-1"><a class="header-anchor" href="#显式绑定" aria-hidden="true">#</a> 显式绑定</h2><ul><li>JavaScript 所有的函数都可以使用 call 和 apply 方法。 <ul><li>第一个参数是相同的，要求传入一个对象； <ul><li>这个对象的作用是什么呢？就是给 this 准备的。</li><li>在调用这个函数时，会将 this 绑定到这个传入的对象上。</li></ul></li><li>后面的参数，apply 为数组，call 为参数列表； <ul><li>因为上面的过程，我们明确的绑定了 this 指向的对象，所以称之为 显式绑定。</li></ul></li></ul></li></ul><p>如果传入一个 null 或者 undefined，那么这个显示绑定会被忽略，使用默认规则</p><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h3><ul><li>一个函数总是显示的绑定到一个对象上  使用 bind 方法，bind() 方法创建一个新的绑定函数（bound function，BF）；  绑定函数是一个 exotic function object（怪异函数对象，ECMAScript 2015 中的术语）  在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li></ul><h2 id="new-绑定" tabindex="-1"><a class="header-anchor" href="#new-绑定" aria-hidden="true">#</a> new 绑定</h2><ul><li>JavaScript 中的函数可以当做一个类的构造函数来使用，也就是使用 new 关键字。</li><li>使用 new 关键字来调用函数是，会执行如下的操作： <ol><li>创建一个全新的对象；</li><li>这个新对象会被执行 prototype 连接；</li><li>这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）；</li><li>如果函数没有返回其他对象，表达式会返回这个新对象；</li></ol></li></ul><h2 id="规则优先级" tabindex="-1"><a class="header-anchor" href="#规则优先级" aria-hidden="true">#</a> 规则优先级</h2><ol><li>默认规则的优先级最低</li><li>显示绑定优先级高于隐式绑定</li><li>new 绑定优先级高于隐式绑定</li><li>new 绑定优先级高于 bind <ul><li>new 绑定和 call、apply 是不允许同时使用的，所以不存在谁的优先级更高</li><li>new 绑定可以和 bind 一起使用，new 绑定优先级更高</li></ul></li></ol><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><ul><li>箭头函数不会绑定 this、arguments 属性；</li><li>箭头函数不能作为构造函数来使用（不能和 new 一起来使用，会抛出错误）；</li></ul><p>根据外层作用域来决定 this</p>`,22),t=[s];function h(d,r){return a(),l("div",null,t)}const o=i(e,[["render",h],["__file","this.html.vue"]]);export{o as default};
