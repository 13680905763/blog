import{_ as n,p as s,q as a,a1 as t}from"./framework-204010b2.js";const e="/blog/img/web/javascript/js-base/object/内存.jpg",p={},i=t(`<h1 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h1><p>对象类型是一种存储键值对（key-value）的引用数据类型；</p><ul><li>key 是字符串（也叫做属性名 property name ，ES6 之后也可以是 Symbol 类型）；</li><li>value 可以是任意类型，包括基本数据类型、函数类型、对象类型等；</li></ul><h2 id="创建对象和使用对象" tabindex="-1"><a class="header-anchor" href="#创建对象和使用对象" aria-hidden="true">#</a> 创建对象和使用对象</h2><ul><li>对象字面量（Object Literal）：通过{}</li><li>new Object+动态添加属性；</li><li>new 其他类；</li></ul><p>属性之间是以逗号（ comma ）分割的；</p><p>对象的使用过程包括如下操作：</p><ul><li><p>访问对象的属性；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改对象的属性；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>info<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小张&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加对象的属性；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>info<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">180</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除对象的属性；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> info<span class="token punctuation">.</span>height
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="对象的遍历" tabindex="-1"><a class="header-anchor" href="#对象的遍历" aria-hidden="true">#</a> 对象的遍历</h2><ul><li><p>对象的遍历（迭代）：表示获取对象中所有的属性和方法。</p><ul><li>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组；</li></ul></li><li><p>遍历方式一：普通 for 循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> infoKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> infoKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> infoKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> info<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遍历方式二：for in 遍历方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> info<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="栈内存和堆内存" tabindex="-1"><a class="header-anchor" href="#栈内存和堆内存" aria-hidden="true">#</a> 栈内存和堆内存</h2><p>我们知道程序是需要加载到内存中来执行的，我们可以将内存划分为两个区域：栈内存和堆内存。</p><ul><li>原始类型占据的空间是在栈内存中分配的；</li><li>对象类型占据的空间是在堆内存中分配的；</li></ul><p><img src="`+e+`" alt="内存"></p><h3 id="值类型和引用类型" tabindex="-1"><a class="header-anchor" href="#值类型和引用类型" aria-hidden="true">#</a> 值类型和引用类型</h3><ul><li>原始类型的保存方式：在变量中保存的是值本身，所以原始类型也被称之为值类型；</li><li>对象类型的保存方式：在变量中保存的是对象的“引用”，所以对象类型也被称之为引用类型；</li></ul><h2 id="批量创建对象的方案" tabindex="-1"><a class="header-anchor" href="#批量创建对象的方案" aria-hidden="true">#</a> 批量创建对象的方案</h2><p>批量创建对象，但是又让它们的属性不一样</p><h3 id="工厂函数" tabindex="-1"><a class="header-anchor" href="#工厂函数" aria-hidden="true">#</a> 工厂函数</h3><ul><li>我们可以封装一个函数，这个函数用于帮助我们创建一个对象，我们只需要重复调用这个函数即可；</li><li>工厂模式其实是一种常见的设计模式；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  person<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  person<span class="token punctuation">.</span>age <span class="token operator">=</span> age

  person<span class="token punctuation">.</span>eating <span class="token operator">=</span> <span class="token function">funciton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在吃东西</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> person
<span class="token punctuation">}</span>
<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;小张&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><ul><li>工厂方法创建对象有一个比较大的问题：我们在打印对象时，对象的类型都是 Object 类型 <ul><li>但是从某些角度来说，这些对象应该有一个他们共同的类型；</li><li>下面我们来看一下另外一种模式：构造函数的方式；</li></ul></li><li>什么是构造函数 <ul><li>构造函数也称之为构造器（constructor），通常是我们在创建对象时会调用的函数；</li><li>在其他面向的编程语言里面，构造函数是存在于类中的一个方法，称之为构造方法；</li><li>但是 JavaScript 中的构造函数有点不太一样，构造函数扮演了其他语言中类的角色；</li></ul></li><li>也就是在 JavaScript 中，构造函数其实就是类的扮演者： <ul><li>比如系统默认给我们提供的 Date 就是一个构造函数，也可以看成是一个类；</li><li>在 ES5 之前，我们都是通过 function 来声明一个构造函数（类）的，之后通过 new 关键字来对其进行调用；</li><li>在 ES6 之后，JavaScript 可以像别的语言一样，通过 class 来声明一个类；</li></ul></li><li>那么类和对象到底是什么关系呢？</li></ul><h3 id="类和对象的关系" tabindex="-1"><a class="header-anchor" href="#类和对象的关系" aria-hidden="true">#</a> 类和对象的关系</h3><ul><li>那么什么是类（构造函数）呢？ <ul><li>现实生活中往往是根据一份描述/一个模板来创建一个实体对象的.</li><li>编程语言也是一样, 也必须先有一份描述, 在这份描述中说明将来创建出来的对象有哪些属性(成员变量)和行为(成员方法)</li></ul></li><li>比如现实生活中，我们会如此来描述一些事物： <ul><li>比如水果 fruits 是一类事物的统称，苹果、橘子、葡萄等是具体的对象；</li></ul></li></ul><h3 id="javascript-中的类-es5" tabindex="-1"><a class="header-anchor" href="#javascript-中的类-es5" aria-hidden="true">#</a> JavaScript 中的类（ES5）</h3><ul><li>在 JavaScript 中类的表示形式就是构造函数。</li><li>JavaScript 中的构造函数是怎么样的？ <ul><li>构造函数也是一个普通的函数，从表现形式来说，和千千万万个普通的函数没有任何区别；</li><li>那么如果这么一个普通的函数被使用 new 操作符来调用了，那么这个函数就称之为是一个构造函数；</li></ul></li><li>如果一个函数被使用 new 操作符调用了，那么它会执行如下操作： <ol><li>在内存中创建一个新的对象（空对象）；</li><li>这个对象内部的[[prototype]]属性会被赋值为该构造函数的 prototype 属性；</li><li>构造函数内部的 this，会指向创建出来的新对象；</li><li>执行函数的内部代码（函数体代码）；</li><li>如果构造函数没有返回非空对象，则返回创建出来的新对象；</li></ol></li><li>接下来，我们可以用构造函数的方式来实现一下批量创建学生。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age

  <span class="token keyword">this</span><span class="token punctuation">.</span>eating <span class="token operator">=</span> <span class="token function">funciton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在吃东西</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> person
<span class="token punctuation">}</span>
<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;小张&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个构造函数可以确保我们的对象是有 Person 的类型的（实际是 constructor 的属性，这个我们后续再探讨）；</li><li>事实上构造函数还有很多其他的特性： <ul><li>比如原型、原型链、实现继承的方案</li><li>比如 ES6 中类、继承的实现；</li></ul></li></ul>`,29),o=[i];function l(c,u){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","object.html.vue"]]);export{d as default};
