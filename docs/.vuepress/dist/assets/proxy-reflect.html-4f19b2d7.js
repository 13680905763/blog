import{_ as e,M as p,p as o,q as c,R as n,t as a,N as l,a1 as s}from"./framework-204010b2.js";const i={},r=s(`<h1 id="proxy-reflect" tabindex="-1"><a class="header-anchor" href="#proxy-reflect" aria-hidden="true">#</a> Proxy-Reflect</h1><h2 id="监听对象的操作" tabindex="-1"><a class="header-anchor" href="#监听对象的操作" aria-hidden="true">#</a> 监听对象的操作</h2><p>当需要监听对象中的属性被设置或获取的过程</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Object.defineProperty 的存储属性描述符来对属性的操作进行监听</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  Objcet<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">监听到给</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">设置值</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">监听到获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的值</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点</p><ol><li>Object.defineProperty 设计的初衷，不是为了去监听截止一个对象中所有的属性的。 <ul><li>我们在定义某些属性的时候，初衷其实是定义普通的属性，但是后面我们强行将它变成了数据属性描述符。</li></ul></li><li>如果我们想监听更加丰富的操作，比如新增属性、删除属性，那么 Object.defineProperty 是无能为力的。</li></ol><h2 id="proxy-基本使用" tabindex="-1"><a class="header-anchor" href="#proxy-基本使用" aria-hidden="true">#</a> Proxy 基本使用</h2><ul><li><p>在 ES6 中，新增了一个 Proxy 类，这个类从名字就可以看出来，是用于帮助我们创建一个代理的：</p><ul><li>如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy 对象）；之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作；</li></ul></li><li><p>我们可以将上面的案例用 Proxy 来实现一次：</p><ul><li>需要 new Proxy 对象，并且传入需要侦听的对象以及一个处理对象，可以称之为 handler；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fafa&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>之后的操作都是直接对 Proxy 的操作，而不是原有的对象，因为我们需要在 handler 里面进行侦听；</li></ul></li></ul><h3 id="proxy-的-set-和-get-捕获器" tabindex="-1"><a class="header-anchor" href="#proxy-的-set-和-get-捕获器" aria-hidden="true">#</a> Proxy 的 set 和 get 捕获器</h3><ul><li>如果我们想要侦听某些具体的操作，那么就可以在 handler 中添加对应的捕捉器（Trap）：</li><li>set 和 get 分别对应的是函数类型； <ul><li>set 函数有四个参数： <ul><li>target：目标对象（侦听的对象）；</li><li>property：将被设置的属性 key；</li><li>value：新属性值；</li><li>receiver：调用的代理对象；</li></ul></li><li>get 函数有三个参数： <ul><li>target：目标对象（侦听的对象）；</li><li>property：被获取的属性 key；</li><li>receiver：调用的代理对象；</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set捕获器&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get捕获器&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="proxy-所有捕获器" tabindex="-1"><a class="header-anchor" href="#proxy-所有捕获器" aria-hidden="true">#</a> Proxy 所有捕获器</h3><table><thead><tr><th>捕获器</th><th></th></tr></thead><tbody><tr><td>handler.getPrototypeOf</td><td>Object.getPrototypeOf 方法的捕捉器。</td></tr><tr><td>handler.setPrototypeOf</td><td>Object.setPrototypeOf 方法的捕捉器。</td></tr><tr><td>handler.isExtensible</td><td>Object.isExtensible 方法的捕捉器(判断是否可以新增属性)。</td></tr><tr><td>handler.preventExtensions</td><td>Object.preventExtensions 方法的捕捉器。</td></tr><tr><td>handler.getOwnPropertyDescriptor</td><td>Object.getOwnPropertyDescriptor 方法的捕捉器。</td></tr><tr><td>handler.defineProperty</td><td>Object.defineProperty 方法的捕捉器。</td></tr><tr><td>handler.ownKeys</td><td>Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</td></tr><tr><td>handler.has</td><td>in 操作符的捕捉器。</td></tr><tr><td>handler.get</td><td>属性读取操作的捕捉器</td></tr><tr><td>handler.set</td><td>属性设置操作的捕捉器</td></tr><tr><td>handler.deleteProperty</td><td>delete 操作符的捕捉器</td></tr><tr><td>handler.apply</td><td>函数调用操作的捕捉器</td></tr><tr><td>handler.construct</td><td>new 操作符的捕捉器</td></tr></tbody></table><h3 id="construct-和-apply" tabindex="-1"><a class="header-anchor" href="#construct-和-apply" aria-hidden="true">#</a> construct 和 apply</h3><p>construct 和 apply，它们是应用于函数对象的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo被调用&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> fooProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> thisArg<span class="token punctuation">,</span> otherArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数的apply侦听&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">target</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> otherArgs<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> argArray<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> argArray<span class="token punctuation">,</span> newTarget<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reflect-的作用" tabindex="-1"><a class="header-anchor" href="#reflect-的作用" aria-hidden="true">#</a> Reflect 的作用</h2>`,17),u=s("<li>Reflect 也是 ES6 新增的一个 API，它是一个对象，字面的意思是反射。 <ul><li>它主要提供了很多操作 JavaScript 对象的方法，有点像 Object 中操作对象的方法；</li><li>比如 Reflect.getPrototypeOf(target)类似于 Object.getPrototypeOf()；</li><li>比如 Reflect.defineProperty(target, propertyKey, attributes)类似于 Object.defineProperty() ；</li></ul></li><li>如果我们有 Object 可以做这些操作，那么为什么还需要有 Reflect 这样的新增对象呢？ <ul><li>这是因为在早期的 ECMA 规范中没有考虑到这种对 对象本身 的操作如何设计会更加规范，所以将这些 API 放到了 Object 上面；</li><li>但是 Object 作为一个构造函数，这些操作实际上放到它身上并不合适；</li><li>另外还包含一些类似于 in、delete 操作符，让 JS 看起来是会有一些奇怪的；</li><li>所以在 ES6 中新增了 Reflect，让我们这些操作都集中到了 Reflect 对象上；</li><li>另外在使用 Proxy 时，可以做到不操作原对象；</li></ul></li>",2),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/Comparing_Reflect_and_Object_methods",target:"_blank",rel:"noopener noreferrer"},k=s(`<h3 id="reflect-的常见方法" tabindex="-1"><a class="header-anchor" href="#reflect-的常见方法" aria-hidden="true">#</a> Reflect 的常见方法</h3><table><thead><tr><th>Reflect 中有哪些常见的方法呢？它和 Proxy 是一一对应的，也是 13 个</th><th></th></tr></thead><tbody><tr><td>Reflect.getPrototypeOf(target)</td><td>类似于 Object.getPrototypeOf()</td></tr><tr><td>Reflect.setPrototypeOf(target, prototype)</td><td>设置对象原型的函数. 返回一个 Boolean， 如果更新成功，则返回 true。</td></tr><tr><td>Reflect.isExtensible(target)</td><td>类似于 Object.isExtensible()</td></tr><tr><td>Reflect.preventExtensions(target)</td><td>类似于 Object.preventExtensions()。返回一个 Boolean。</td></tr><tr><td>Reflect.getOwnPropertyDescriptor(target, propertyKey)</td><td>类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性，则返回对应的属性描述符, 否则返回 undefined。</td></tr><tr><td>Reflect.defineProperty(target, propertyKey, attributes)</td><td>和 Object.defineProperty() 类似。如果设置成功就会返回 true。</td></tr><tr><td>Reflect.ownKeys(target)</td><td>返回一个包含所有自身属性（不包含继承属性）的数组。(类似 Object.keys(), 但不会受 enumerable 影响).</td></tr><tr><td>Reflect.has(target, propertyKey)</td><td>判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同。</td></tr><tr><td>Reflect.get(target, propertyKey[, receiver])</td><td>获取对象身上某个属性的值，类似于 target[name]</td></tr><tr><td>Reflect.set(target, propertyKey, value[, receiver])</td><td>将值分配给属性的函数。返回一个 Boolean，如果更新成功，则返回 true</td></tr><tr><td>Reflect.deleteProperty(target, propertyKey)</td><td>作为函数的 delete 操作符，相当于执行 delete target[name]</td></tr><tr><td>Reflect.apply(target, thisArgument, argumentsList)</td><td>对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似</td></tr><tr><td>Reflect.construct(target, argumentsList[, newTarget])</td><td>对构造函数进行 new 操作，相当于执行 new target(...args)</td></tr></tbody></table><h3 id="reflect-的使用" tabindex="-1"><a class="header-anchor" href="#reflect-的使用" aria-hidden="true">#</a> Reflect 的使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Proxy案例中对原对象的操作，都修改为Reflect来操作</span>
<span class="token keyword">const</span> objProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//receiver参数，如果我们的源对象（obj）有setter、getter的访问器属性，那么可以通过receiver来改变里面的this；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reflect-的-construct" tabindex="-1"><a class="header-anchor" href="#reflect-的-construct" aria-hidden="true">#</a> Reflect 的 construct</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> stu <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;fafa&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Animal<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function v(y,b){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[u,n("li",null,[a("那么 Object 和 Reflect 对象之间的 API 关系，"),n("a",d,[a("可以参考 MDN 文档"),l(t)])])]),k])}const m=e(i,[["render",v],["__file","proxy-reflect.html.vue"]]);export{m as default};
