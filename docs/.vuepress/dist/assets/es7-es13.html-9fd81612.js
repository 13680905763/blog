import{_ as a,p as n,q as s,a1 as e}from"./framework-204010b2.js";const t={},p=e(`<h1 id="es7-13" tabindex="-1"><a class="header-anchor" href="#es7-13" aria-hidden="true">#</a> es7-13</h1><h2 id="es7" tabindex="-1"><a class="header-anchor" href="#es7" aria-hidden="true">#</a> es7</h2><h3 id="array-includes" tabindex="-1"><a class="header-anchor" href="#array-includes" aria-hidden="true">#</a> Array Includes</h3><ul><li>在 ES7 之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf 获取结果，并且判断是否为 -1。</li><li>在 ES7 中，我们可以通过 includes 来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true，否则返回 false。</li></ul><h3 id="指数-exponentiation-运算符" tabindex="-1"><a class="header-anchor" href="#指数-exponentiation-运算符" aria-hidden="true">#</a> 指数 exponentiation 运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// es7之前</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// es7</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es8" tabindex="-1"><a class="header-anchor" href="#es8" aria-hidden="true">#</a> es8</h2><h3 id="object-values" tabindex="-1"><a class="header-anchor" href="#object-values" aria-hidden="true">#</a> Object values</h3><p>Object.keys 获取一个对象所有的 key，ES8 中提供了 Object.values 来获取所有的 value 值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fafa&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//[&#39;fafa&#39;,18]</span>
Object<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-entries" tabindex="-1"><a class="header-anchor" href="#object-entries" aria-hidden="true">#</a> Object entries</h3><p>Object.entries 可以获取到一个数组，数组中会存放可枚举属性的键值对数组。(对象、数组、字符串进行操作)；</p><h3 id="string-padding" tabindex="-1"><a class="header-anchor" href="#string-padding" aria-hidden="true">#</a> String Padding</h3><p>ES8 中增加了 padStart 和 padEnd 方法，分别是对字符串的首尾进行填充的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
message<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// aaaahello world</span>
message<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token comment">// hello worldbbbb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景：比如需要对身份证、银行卡的前面位数进行隐藏：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token string">&#39;441581199904045322&#39;</span>
<span class="token keyword">const</span> newNum <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&#39;*wo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="trailing-commas" tabindex="-1"><a class="header-anchor" href="#trailing-commas" aria-hidden="true">#</a> Trailing Commas</h3><p>ES8 中，允许在函数定义和调用时多加一个逗号：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-descriptors" tabindex="-1"><a class="header-anchor" href="#object-descriptors" aria-hidden="true">#</a> Object Descriptors</h3><p>Object.getOwnPropertyDescriptors 返回对象的属性描述符</p><h3 id="async-function-async、await" tabindex="-1"><a class="header-anchor" href="#async-function-async、await" aria-hidden="true">#</a> Async Function：async、await</h3><h2 id="es9" tabindex="-1"><a class="header-anchor" href="#es9" aria-hidden="true">#</a> es9</h2><h3 id="async-iterators" tabindex="-1"><a class="header-anchor" href="#async-iterators" aria-hidden="true">#</a> Async iterators</h3><h3 id="object-spread-operators" tabindex="-1"><a class="header-anchor" href="#object-spread-operators" aria-hidden="true">#</a> Object spread operators</h3><h3 id="promise-finally" tabindex="-1"><a class="header-anchor" href="#promise-finally" aria-hidden="true">#</a> Promise finally</h3><h2 id="es10" tabindex="-1"><a class="header-anchor" href="#es10" aria-hidden="true">#</a> es10</h2><h3 id="flat-flatmap" tabindex="-1"><a class="header-anchor" href="#flat-flatmap" aria-hidden="true">#</a> flat flatMap</h3><ul><li>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li><li>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</li></ul><h3 id="object-fromentries" tabindex="-1"><a class="header-anchor" href="#object-fromentries" aria-hidden="true">#</a> Object fromEntries</h3><ul><li>Object.entries 将一个对象转换成 entries（数组）</li><li>Object.formEntries 将 entries 转对象</li></ul><h3 id="trimstart-trimend" tabindex="-1"><a class="header-anchor" href="#trimstart-trimend" aria-hidden="true">#</a> trimStart trimEnd</h3><ul><li>去除一个字符串首尾的空格，我们可以通过 trim 方法，</li><li>单独去除前面或者后面 trimStart 和 trimEnd；</li></ul><h3 id="other" tabindex="-1"><a class="header-anchor" href="#other" aria-hidden="true">#</a> other</h3><ul><li>Symbol description</li><li>Optional catch binding</li></ul><h2 id="es11" tabindex="-1"><a class="header-anchor" href="#es11" aria-hidden="true">#</a> es11</h2><h3 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> BigInt</h3><ul><li><p>在早期的 JavaScript 中，我们不能正确的表示过大的数字</p><ul><li>大于 MAX_SAFE_INTEGER 的数值，表示的可能是不正确的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> maxInt <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>ES11 中，引入了新的数据类型 BigInt，用于表示大的整数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">9007199254740991n</span> <span class="token comment">//BitInt的表示方法是在数值的后面加上n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="nullish-coalescing-operator" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing-operator" aria-hidden="true">#</a> Nullish Coalescing Operator</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//空值合并操作符</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">const</span> result1 <span class="token operator">=</span> foo <span class="token operator">||</span> <span class="token string">&#39;默认值&#39;</span> <span class="token comment">// 默认值</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> foo <span class="token operator">??</span> <span class="token string">&#39;默认值&#39;</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="optional-chaining-可选链" tabindex="-1"><a class="header-anchor" href="#optional-chaining-可选链" aria-hidden="true">#</a> Optional Chaining 可选链</h3><h3 id="global-this" tabindex="-1"><a class="header-anchor" href="#global-this" aria-hidden="true">#</a> Global This</h3><p>在之前我们希望获取 JavaScript 环境的全局对象，不同的环境获取的方式是不一样的</p><ul><li>比如在浏览器中可以通过 this、window 来获取；</li><li>比如在 Node 中我们需要通过 global 来获取；</li></ul><p>在 ES11 中对获取全局对象进行了统一的规范：globalThis</p><h3 id="for-in-标准化" tabindex="-1"><a class="header-anchor" href="#for-in-标准化" aria-hidden="true">#</a> for..in 标准化</h3><ul><li>在 ES11 之前，虽然很多浏览器支持 for...in 来遍历对象类型，但是并没有被 ECMA 标准化。</li><li>在 ES11 中，对其进行了标准化，for...in 是用于遍历对象的 key 的：</li></ul><h3 id="othe-r" tabindex="-1"><a class="header-anchor" href="#othe-r" aria-hidden="true">#</a> othe r</h3><ul><li>Dynamic Import：后续 ES Module 模块化中讲解。</li><li>Promise.allSettled：后续讲 Promise 的时候讲解。</li><li>import meta：后续 ES Module 模块化中讲解。</li></ul><h2 id="es12" tabindex="-1"><a class="header-anchor" href="#es12" aria-hidden="true">#</a> es12</h2><h3 id="finalizationregistry" tabindex="-1"><a class="header-anchor" href="#finalizationregistry" aria-hidden="true">#</a> FinalizationRegistry</h3><p>FinalizationRegistry 对象可以让你在对象被垃圾回收时请求一个回调。</p><ul><li>FinalizationRegistry 提供了这样的一种方法：当一个在注册表中注册的对象被回收时，请求在某个时间点上调用一个清理回调。（清理回调有时被称为 finalizer ）;</li><li>你可以通过调用 register 方法，注册任何你想要清理回调的对象，传入该对象和所含的值;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fafa&#39;</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> registry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;对象被销毁了&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

registry<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weakrefs" tabindex="-1"><a class="header-anchor" href="#weakrefs" aria-hidden="true">#</a> WeakRefs</h3><p>如果我们默认将一个对象赋值给另外一个引用，那么这个引用是一个强引用： 如果我们希望是一个弱引用的话，可以使用 WeakRef；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fafa&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logical-assignment-operators" tabindex="-1"><a class="header-anchor" href="#logical-assignment-operators" aria-hidden="true">#</a> logical assignment operators</h3><p>|| &amp;&amp; ??</p><h3 id="oth-er" tabindex="-1"><a class="header-anchor" href="#oth-er" aria-hidden="true">#</a> oth er</h3><ul><li>Numeric Separator （数字分隔）</li><li>String.replaceAll</li></ul><h2 id="es13" tabindex="-1"><a class="header-anchor" href="#es13" aria-hidden="true">#</a> es13</h2><h3 id="method-at" tabindex="-1"><a class="header-anchor" href="#method-at" aria-hidden="true">#</a> method .at()</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bac&#39;</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//cba</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//bac</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//e</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-hasown-obj-propkey" tabindex="-1"><a class="header-anchor" href="#object-hasown-obj-propkey" aria-hidden="true">#</a> Object.hasOwn(obj, propKey)</h3><ul><li>Object 中新增了一个静态方法（类方法）： hasOwn(obj, propKey)用于判断一个对象中是否有某个自己的属性；</li><li>那么和之前学习的 Object.prototype.hasOwnProperty 有什么区别呢？ <ul><li>区别一：防止对象内部有重写 hasOwnProperty</li><li>区别二：对于隐式原型指向 null 的对象， hasOwnProperty 无法进行判断</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fafa&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">hasOwnProperty</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> info <span class="token operator">=</span> Objecet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
info<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;fafa&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//可以判断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-members-of-classe" tabindex="-1"><a class="header-anchor" href="#new-members-of-classe" aria-hidden="true">#</a> New members of classe</h3><p>在 ES13 中，新增了定义 class 类中成员字段（field）的其他方式：</p><ul><li>Instance public fields</li><li>Static public fields</li><li>Instance private fields</li><li>static private fields</li><li>static block</li></ul>`,71),i=[p];function o(c,l){return n(),s("div",null,i)}const d=a(t,[["render",o],["__file","es7-es13.html.vue"]]);export{d as default};
