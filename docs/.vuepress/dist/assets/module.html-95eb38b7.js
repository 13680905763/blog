import{_ as e,M as l,p as o,q as i,R as n,t as s,N as t,a1 as p}from"./framework-204010b2.js";const c="/blog/img/web/node/module/深度优先搜索.jpg",u="/blog/img/web/node/module/解析流程.jpg",r="/blog/img/web/node/module/构建阶段.jpg",d="/blog/img/web/node/module/实例求值阶段.jpg",m={},k=p(`<h1 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><ol><li>事实上模块化开发最终的目的是将程序划分成一个个小的结构；</li><li>这个结构中编写属于自己的逻辑代码，有自己的作用域，定义变量名词时不会影响到其他的结构；</li><li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</li><li>也可以通过某种方式，导入另外结构中的变量、函数、对象等；</li></ol><h2 id="没有模块化带来的问题" tabindex="-1"><a class="header-anchor" href="#没有模块化带来的问题" aria-hidden="true">#</a> 没有模块化带来的问题</h2><ul><li>早期没有模块化带来了很多的问题：比如命名冲突的问题</li></ul><p>解决方法：立即函数调用表达式（IIFE:Immediately Invoked Function Expression）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;fafaA&#39;</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    age
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// b.js</span>

<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;fafaB&#39;</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">23</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    age
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// c.js</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// fafaA</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleB<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// fafaB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点</p><ul><li>必须记得每一个模块中返回对象的命名，才能在其他模块使用过程中正确的使用；</li><li>代码写起来混乱不堪，每个文件中的代码都需要包裹在一个匿名函数中来编写；</li><li>在没有合适的规范情况下，每个人、每个公司都可能会任意命名、甚至出现模块名称相同的情况；</li></ul><p>解决方法</p><ul><li>我们需要制定一定的规范来约束每个人都按照这个规范去编写模块化的代码；</li><li>这个规范中应该包括核心功能：模块本身可以导出暴露的属性，模块又可以导入自己需要的属性；</li><li>JavaScript 社区为了解决上面的问题，涌现出一系列好用的规范。</li></ul><h2 id="commonjs" tabindex="-1"><a class="header-anchor" href="#commonjs" aria-hidden="true">#</a> CommonJS</h2><h3 id="commonjs-规范和-node-关系" tabindex="-1"><a class="header-anchor" href="#commonjs-规范和-node-关系" aria-hidden="true">#</a> CommonJS 规范和 Node 关系</h3><ul><li>CommonJS 是一个规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为 ServerJS，后来为了体现它的广泛性，修改为 CommonJS，平时我们也会简称为 CJS。 <ul><li>Node 是 CommonJS 在服务器端一个具有代表性的实现；</li><li>Browserify 是 CommonJS 在浏览器中的一种实现；</li><li>webpack 打包工具具备对 CommonJS 的支持和转换；</li></ul></li><li>Node 中对 CommonJS 进行了支持和实现，让我们在开发 node 的过程中可以方便的进行模块化开发： <ul><li>在 Node 中每一个 js 文件都是一个单独的模块；</li><li>这个模块中包括 CommonJS 规范的核心变量：exports、module.exports、require；</li><li>我们可以使用这些变量来方便的进行模块化开发；</li></ul></li><li>模块化的核心是导出和导入，Node 中对其进行了实现： <ul><li>exports 和 module.exports 可以负责对模块中的内容进行导出；</li><li>require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</li></ul></li></ul><h3 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h3><h4 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h4><p>exports 是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">&#39;fafa&#39;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">export</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token keyword">export</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token comment">// b.js</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

<span class="token comment">// 意味着a变量等于exports对象</span>
<span class="token comment">// require通过各种查找方式，最终找到expotrs这个对象</span>
<span class="token comment">// 并将exports对象赋值给a变量，a变量就等于exports对象了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="module-exports" tabindex="-1"><a class="header-anchor" href="#module-exports" aria-hidden="true">#</a> module.exports</h4><p>Node 中我们经常导出东西的时候，又是通过 module.exports 导出的：</p><ul><li>CommonJS 中是没有 module.exports 的概念的；</li><li>但是为了实现模块的导出，Node 中使用的是 Module 的类，每一个模块都是 Module 的一个实例，也就是 module；</li><li>所以在 Node 中真正用于导出的其实根本不是 exports，而是 module.exports；</li><li>因为 module 才是导出的真正实现者；</li></ul><p>为什么 exports 也可以导出</p><ul><li>因为 module 对象的 exports 属性是 exports 对象的一个引用；</li><li>也就是说 module.exports = exports = main 中的 bar；</li></ul><h3 id="require-细节" tabindex="-1"><a class="header-anchor" href="#require-细节" aria-hidden="true">#</a> require 细节</h3><p>require 是一个函数，可以帮助我们引入一个文件（模块）中导出的对象。 require 的查找规则 require(X)</p><ol><li>X 是一个 Node 核心模块，比如 path、http <ul><li>直接返回核心模块，并且停止查找</li></ul></li><li>X 是以 ./ 或 ../ 或 /（根目录）开头的 <ul><li>将 X 当做一个文件在对应的目录下查找 <ul><li>如果有后缀名，按照后缀名的格式查找对应的文件</li><li>如果没有后缀名，会按照如下顺序： <ol><li>直接查找文件 X</li><li>查找 X.js 文件</li><li>查找 X.json 文件</li><li>查找 X.node 文件</li></ol></li></ul></li><li>没有找到对应的文件，将 X 作为一个目录 <ul><li>查找目录下面的 index 文件 <ol><li>查找 X/index.js 文件</li><li>查找 X/index.json 文件</li><li>查找 X/index.node 文件</li></ol></li></ul></li><li>如果没有找到，那么报错：not found</li></ul></li><li>直接是一个 X（没有路径），并且 X 不是一个核心模块 <ul><li>去 node_modules 目录下找，当前目录找到就去上一层，直到根目录找不到就报错</li></ul></li></ol><h3 id="模块的加载过程" tabindex="-1"><a class="header-anchor" href="#模块的加载过程" aria-hidden="true">#</a> 模块的加载过程</h3><ol><li>模块在被第一次引入时，模块中的 js 代码会被运行一次</li><li>模块被多次引入时，会缓存，最终只加载（运行）一次 <ul><li>这是因为每个模块对象 module 都有一个属性：loaded。</li><li>为 false 表示还没有加载，为 true 表示已经加载；</li></ul></li></ol><p>3.循环引入，那么加载顺序按深度优先搜索 <img src="`+c+`" alt="深度优先搜索"></p><p>main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</p><h3 id="commonjs-规范缺点" tabindex="-1"><a class="header-anchor" href="#commonjs-规范缺点" aria-hidden="true">#</a> CommonJS 规范缺点</h3><p>CommonJS 加载模块是同步的：</p><ul><li>同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行；</li><li>这个在服务器不会有什么问题，因为服务器加载的 js 文件都是本地文件，加载速度非常快；</li></ul><p>如果应用于浏览器</p><ul><li>浏览器加载 js 文件需要先从服务器将文件下载下来，之后再加载运行；</li><li>那么采用同步的就意味着后续的 js 代码都无法正常运行，即使是一些简单的 DOM 操作；</li><li>所以在浏览器中，我们通常不使用 CommonJS 规范：</li><li>当然在 webpack 中使用 CommonJS 是因为它会将我们的代码转成浏览器可以直接执行的代码；</li></ul><p>在早期为了可以在浏览器中使用模块化，通常会采用 AMD 或 CMD：</p><h2 id="es-module" tabindex="-1"><a class="header-anchor" href="#es-module" aria-hidden="true">#</a> ES Module</h2><p>ECMA 推出自己的模块化系统</p><ul><li>ES Module 和 CommonJS 的模块化有一些不同之处： <ul><li>一方面它使用了 import 和 export 关键字；</li><li>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式；</li></ul></li><li>ES Module 模块采用 export 和 import 关键字来实现模块化： <ul><li>export 负责将模块内的内容导出；</li><li>import 负责从其他模块导入内容；</li></ul></li><li>了解：采用 ES Module 将自动采用严格模式：use strict</li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>浏览器中演示 ES6 的模块化开发</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接在浏览器中运行代码会报错， Javascript 模块安全性需要通过一个服务器来测试（Live Server）</p><h3 id="export-import" tabindex="-1"><a class="header-anchor" href="#export-import" aria-hidden="true">#</a> export &amp; import</h3><ul><li><p>export 关键字将一个模块中的变量、函数、类等导出；</p></li><li><p>我们希望将其他中内容全部导出，它可以有如下的方式：</p><ol><li>在语句声明的前面直接加上 export 关键字</li><li>将所有需要导出的标识符，放到 export 后面的 {} 中 <ul><li>注意：这里的 {} 里面不是 ES6 的对象字面量的增强写法，{}也不是表示一个对象的；</li><li>所以： export {name: name}，是错误的写法；</li></ul></li><li>导出时给标识符起一个别名 <ul><li>通过 as 关键字起别名</li></ul></li></ol></li><li><p>import 关键字负责从另外一个模块中导入内容</p></li><li><p>导入内容的方式也有多种：</p><ol><li>import {标识符列表} from &#39;模块&#39;； <ul><li>注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容；</li></ul></li><li>导入时给标识符起别名 <ul><li>通过 as 关键字起别名</li></ul></li><li>通过 * 将模块功能放到一个模块功能对象（a module object）上</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;fafa&#39;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token keyword">as</span> Aage <span class="token punctuation">}</span>

<span class="token comment">// b.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> Aage<span class="token punctuation">,</span> sum <span class="token keyword">as</span> Asum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> Aage<span class="token punctuation">,</span> <span class="token function">Asum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// c.js</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> a <span class="token keyword">from</span> <span class="token string">&#39;a.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Aage<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">Asum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>补充：export 和 import 可以结合使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> sum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar.js&#39;</span>

<span class="token comment">// 在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</span>
<span class="token comment">// 这样方便指定统一的接口规范，也方便阅读；</span>
<span class="token comment">// 这个时候，我们就可以使用export和import结合使用；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default" tabindex="-1"><a class="header-anchor" href="#default" aria-hidden="true">#</a> default</h3><p>还有一种导出叫做默认导出（default export）</p><ul><li>默认导出 export 时可以不需要指定名字；</li><li>在导入时不需要使用 {}，并且可以自己来指定名字；</li><li>它也方便我们和现有的 CommonJS 等规范相互操作；</li></ul><p>在一个模块中，只能有一个默认导出；</p><h3 id="import-函数" tabindex="-1"><a class="header-anchor" href="#import-函数" aria-hidden="true">#</a> import 函数</h3><p>通过 import 加载一个模块，是不可以在其放到逻辑代码中的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">import</span> home form <span class="token string">&#39;./index.js&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 错误的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES Module 在被 JS 引擎解析时，就必须知道它的依赖关系；</li><li>由于这个时候 js 代码没有任何的运行，所以无法在进行类似于 if 判断中根据代码的执行情况；</li><li>甚至拼接路径的写法也是错误的：因为我们必须到运行时能确定 path 的值；</li></ul><p>某些情况下，我们确确实实希望动态的来加载某一个模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">home</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    home<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用 import() 函数来动态加载</span>
<span class="token comment">// import函数返回一个Promise，可以通过then获取结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-meta" tabindex="-1"><a class="header-anchor" href="#import-meta" aria-hidden="true">#</a> import meta</h3><p>i<wbr>mport.meta 是一个给 JavaScript 模块暴露特定上下文的元数据属性的对象。</p><ul><li>它包含了这个模块的信息，比如说这个模块的 URL；</li><li>在 ES11（ES2020）中新增的特性；</li></ul><h3 id="es-module-的解析流程" tabindex="-1"><a class="header-anchor" href="#es-module-的解析流程" aria-hidden="true">#</a> ES Module 的解析流程</h3>`,62),v={href:"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[s("ES Module 的解析过程可以划分为三个阶段： "),n("img",{src:u,alt:"解析流程"})],-1),b=n("ol",null,[n("li",null,[n("p",null,[s("构建（Construction），根据地址查找 js 文件，并且下载，将其解析成模块记录（Module Record）； "),n("img",{src:r,alt:"构建阶段"})])]),n("li",null,[n("p",null,"实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。")]),n("li",null,[n("p",null,[s("运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中； "),n("img",{src:d,alt:"实例求值阶段"})])])],-1);function g(x,f){const a=l("ExternalLinkIcon");return o(),i("div",null,[k,n("p",null,[n("a",v,[s("ES Module 是如何被浏览器解析并且让模块之间可以相互引用的呢"),t(a)])]),h,b])}const w=e(m,[["render",g],["__file","module.html.vue"]]);export{w as default};
