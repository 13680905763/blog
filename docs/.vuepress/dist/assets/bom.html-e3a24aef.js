import{_ as o,M as e,p as i,q as t,R as n,t as a,N as c,a1 as s}from"./framework-204010b2.js";const p={},u=s('<h1 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> bom</h1><ul><li>BOM：浏览器对象模型（Browser Object Model） <ul><li>简称 BOM，由浏览器提供的用于处理文档（document）之外的所有内容的其他对象；</li><li>比如 navigator、location、history 等对象；</li></ul></li><li>JavaScript 有一个非常重要的运行环境就是浏览器 <ul><li>而且浏览器本身又作为一个应用程序需要对其本身进行操作；</li><li>所以通常浏览器会有对应的对象模型（BOM，Browser Object Model）；</li><li>我们可以将 BOM 看成是连接 JavaScript 脚本与浏览器窗口的桥梁；</li></ul></li><li>BOM 主要包括一下的对象模型： <ul><li>window：包括全局属性、方法，控制浏览器窗口相关的属性、方法；</li><li>location：浏览器连接到的对象的位置（URL）；</li><li>history：操作浏览器的历史；</li><li>navigator：用户代理（浏览器）的状态和标识（很少用到）；</li><li>screen：屏幕窗口信息（很少用到）；</li></ul></li></ul><h2 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> window 对象</h2><ul><li>window 对象在浏览器中可以从两个视角来看待： <ol><li>全局对象。 <ul><li>我们知道 ECMAScript 其实是有一个全局对象的，这个全局对象在 Node 中是 global；</li><li>在浏览器中就是 window 对象；</li></ul></li><li>浏览器窗口对象。 <ul><li>作为浏览器窗口时，提供了对浏览器操作的相关的 API；</li></ul></li></ol></li><li>当然，这两个视角存在大量重叠的地方，所以不需要刻意去区分它们： <ul><li>事实上对于浏览器和 Node 中全局对象名称不一样的情况，目前已经指定了对应的标准，称之为 globalThis，并且大多数现代浏览器都支持它；</li><li>放在 window 对象上的所有属性都可以被访问；</li><li>使用 var 定义的变量会被添加到 window 对象中；</li><li>window 默认给我们提供了全局的函数和类：setTimeout、Math、Date、Object 等</li></ul></li></ul><h3 id="window-对象的作用" tabindex="-1"><a class="header-anchor" href="#window-对象的作用" aria-hidden="true">#</a> window 对象的作用</h3>',5),r=n("li",null,[a("事实上 window 对象上肩负的重担是非常大的： "),n("ol",null,[n("li",null,"包含大量的属性，localStorage、console、location、history、screenX、scrollX 等等（大概 60+个属性）；"),n("li",null,"包含大量的方法，alert、close、scrollTo、open 等等（大概 40+个方法）；"),n("li",null,"包含大量的事件，focus、blur、load、hashchange 等等（大概 30+个事件）；"),n("li",null,"包含从 EventTarget 继承过来的方法，addEventListener、removeEventListener、dispatchEvent 方法；")])],-1),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window",target:"_blank",rel:"noopener noreferrer"},h=s(`<h3 id="window-常见的属性" tabindex="-1"><a class="header-anchor" href="#window-常见的属性" aria-hidden="true">#</a> window 常见的属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>outerHeight<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenX<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenY<span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;滚动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function w(k,v){const l=e("ExternalLinkIcon");return i(),t("div",null,[u,n("ul",null,[r,n("li",null,[n("a",d,[a("更多属性、方法、事件"),c(l)])])]),h])}const b=o(p,[["render",w],["__file","bom.html.vue"]]);export{b as default};
