import{_ as n,p as a,q as s,a1 as e}from"./framework-204010b2.js";const t={},i=e(`<h1 id="异步函数-async-function" tabindex="-1"><a class="header-anchor" href="#异步函数-async-function" aria-hidden="true">#</a> 异步函数 async function</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo3</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异步函数的执行流程" tabindex="-1"><a class="header-anchor" href="#异步函数的执行流程" aria-hidden="true">#</a> 异步函数的执行流程</h2><ul><li>异步函数的内部代码执行过程和普通的函数是一致的，默认情况下也是会被同步执行。</li><li>异步函数有返回值时，和普通函数会有区别： <ul><li>异步函数也可以有返回值，但是异步函数的返回值相当于被包裹到 Promise.resolve 中；</li><li>如果我们的异步函数的返回值是 Promise，状态由会由 Promise 决定；</li><li>如果我们的异步函数的返回值是一个对象并且实现了 thenable，那么会由对象的 then 方法来决定；</li></ul></li><li>如果我们在 async 中抛出了异常，那么程序它并不会像普通函数一样报错，而是会作为 Promise 的 reject 来传递；</li></ul><h2 id="await-关键字" tabindex="-1"><a class="header-anchor" href="#await-关键字" aria-hidden="true">#</a> await 关键字</h2><ul><li>async 函数另外一个特殊之处就是可以在它内部使用 await 关键字，而普通函数中是不可以的。</li><li>await 关键字有什么特点呢？ <ul><li>通常使用 await 是后面会跟上一个表达式，这个表达式会返回一个 Promise；</li><li>那么 await 会等到 Promise 的状态变成 fulfilled 状态，之后继续执行异步函数；</li></ul></li><li>如果 await 后面是一个普通的值，那么会直接返回这个值；</li><li>如果 await 后面是一个 thenable 的对象，那么会根据对象的 then 方法调用来决定后续的值；</li><li>如果 await 后面的表达式，返回的 Promise 是 reject 的状态，那么会将这个 reject 结果直接作为函数的 Promise 的 reject 值；</li></ul>`,6),o=[i];function c(l,p){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","await-async.html.vue"]]);export{r as default};
